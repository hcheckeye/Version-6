<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2020.2.10">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '', 'session': '001'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="fileList"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1440, 900]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[1,1,1]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="VERSION6" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="debug" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="instructions">
      <TextComponent name="instructions_text">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="instructions_text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$instructionsloop" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="intruct_resp">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="intruct_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="text_2">
        <Param name="color" updates="constant" val="red" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="code"/>
        <Param name="name" updates="None" val="text_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.45, -0.42)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Press return to continue" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="contingency2">
      <TextboxComponent name="resp2">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="autoLog" updates="constant" val="True" valType="bool"/>
        <Param name="bold" updates="constant" val="False" valType="bool"/>
        <Param name="borderColor" updates="constant" val="None" valType="str"/>
        <Param name="borderWidth" updates="constant" val="2" valType="num"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="editable" updates="constant" val="True" valType="bool"/>
        <Param name="fillColor" updates="constant" val="None" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="italic" updates="constant" val="False" valType="bool"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="lineSpacing" updates="constant" val="1.0" valType="num"/>
        <Param name="name" updates="None" val="resp2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="padding" updates="constant" val="None" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val=" " valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </TextboxComponent>
      <KeyboardComponent name="endcont2">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="endcont2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="cont1">
      <CodeComponent name="code">
        <Param name="Before Experiment" updates="constant" val="hcount = 0&amp;#10;" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if trials.thisN == 0: # only on the first iteration,&amp;#10;    loop_timer = core.Clock() # start a new timer&amp;#10;    &amp;#10;hcount = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if loop_timer.getTime() &gt;= 20.0:&amp;#10;    continueRoutine = False&amp;#10;    trials.finished = True&amp;#10;    &amp;#10;hcount = 0" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
      <TextboxComponent name="key_Resp">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="autoLog" updates="constant" val="True" valType="bool"/>
        <Param name="bold" updates="constant" val="False" valType="bool"/>
        <Param name="borderColor" updates="constant" val="black" valType="str"/>
        <Param name="borderWidth" updates="constant" val="2" valType="num"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="editable" updates="constant" val="True" valType="bool"/>
        <Param name="fillColor" updates="constant" val="None" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="italic" updates="constant" val="False" valType="bool"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="lineSpacing" updates="constant" val="1.0" valType="num"/>
        <Param name="name" updates="None" val="key_Resp" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="padding" updates="constant" val="None" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1,0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val=" " valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </TextboxComponent>
      <KeyboardComponent name="endcont1">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="endcont1" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="timer">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="timer" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.6, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="$loop_timer.getTime()" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="alien1">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="/Users/hannah_checkeye/Desktop/UMW/Spring 2021/Verbal Shaping Experiment/stimuli:images/aliens1.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="alien1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.6, 0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.25, 0.25)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <TextComponent name="text">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.4, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="$hcount" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="introducecont2">
      <TextComponent name="instructions_round2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="instructions_round2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="You now must resume communication with the alien commanders. You will need to communicate with the commanders by typing on your keyboard. Your messages need to be rapid, complete, and engaging. They should only include letter and punctuation keys, with no special characters, number keys, or function keys. Once you decide that your message is complete, hit the return key to send it and then begin a new message. Remember that these are alien species, so they do not think in the same way you do. &amp;#10;&amp;#10;Press return to begin" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="endroutine">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="endroutine" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="cont2">
      <CodeComponent name="code_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if trials.thisN == 0: #only on the first iteration,&amp;#10;    loop_timer = core.Clock() #start a new timer" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if trials_2.thisN == 0: # only on the first iteration,&amp;#10;    loop_timer = core.Clock() # start a new timer" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if loop_timer.getTime() &gt;= 10.0:&amp;#10;    continueRoutine = False&amp;#10;    trials_2.finished = True" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_2" valType="code"/>
      </CodeComponent>
      <TextboxComponent name="key_Resp_2">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="autoLog" updates="constant" val="True" valType="bool"/>
        <Param name="bold" updates="constant" val="False" valType="bool"/>
        <Param name="borderColor" updates="constant" val="black" valType="str"/>
        <Param name="borderWidth" updates="constant" val="2" valType="num"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="editable" updates="constant" val="True" valType="bool"/>
        <Param name="fillColor" updates="constant" val="None" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="italic" updates="constant" val="False" valType="bool"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="lineSpacing" updates="constant" val="1.0" valType="num"/>
        <Param name="name" updates="None" val="key_Resp_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="padding" updates="constant" val="None" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1,0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val=" " valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </TextboxComponent>
      <KeyboardComponent name="endcont1_2">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="endcont1_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="timer_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="timer_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.6, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="$round(15.0 - t, ndigits = 1)" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="hostagecounter1_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="hostagecounter1_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.4, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="Hostage Count: 0" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="aliens2">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="/Users/hannah_checkeye/Desktop/UMW/Spring 2021/Verbal Shaping Experiment/stimuli:images/aliens2.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="aliens2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.6, 0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.25, 0.25)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="IAT2">
      <TextboxComponent name="sentec_2">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="autoLog" updates="constant" val="True" valType="bool"/>
        <Param name="bold" updates="constant" val="False" valType="bool"/>
        <Param name="borderColor" updates="constant" val="None" valType="str"/>
        <Param name="borderWidth" updates="constant" val="2" valType="num"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="editable" updates="constant" val="False" valType="bool"/>
        <Param name="fillColor" updates="constant" val="None" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="italic" updates="constant" val="False" valType="bool"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="lineSpacing" updates="constant" val="1.0" valType="num"/>
        <Param name="name" updates="None" val="sentec_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="padding" updates="constant" val="None" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$sentences2" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </TextboxComponent>
      <TextboxComponent name="choicea2">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="autoLog" updates="constant" val="True" valType="bool"/>
        <Param name="bold" updates="constant" val="False" valType="bool"/>
        <Param name="borderColor" updates="constant" val="None" valType="str"/>
        <Param name="borderWidth" updates="constant" val="2" valType="num"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="editable" updates="constant" val="False" valType="bool"/>
        <Param name="fillColor" updates="constant" val="None" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="italic" updates="constant" val="False" valType="bool"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="lineSpacing" updates="constant" val="1.0" valType="num"/>
        <Param name="name" updates="None" val="choicea2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="padding" updates="constant" val="None" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.1, -0.1)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$choice_a2" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </TextboxComponent>
      <TextboxComponent name="choiceb2">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="autoLog" updates="constant" val="True" valType="bool"/>
        <Param name="bold" updates="constant" val="False" valType="bool"/>
        <Param name="borderColor" updates="constant" val="None" valType="str"/>
        <Param name="borderWidth" updates="constant" val="2" valType="num"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="editable" updates="constant" val="False" valType="bool"/>
        <Param name="fillColor" updates="constant" val="None" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="italic" updates="constant" val="False" valType="bool"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="lineSpacing" updates="constant" val="1.0" valType="num"/>
        <Param name="name" updates="None" val="choiceb2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="padding" updates="constant" val="None" valType="code"/>
        <Param name="pos" updates="constant" val="(0.2, -0.1)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$choice_b2" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </TextboxComponent>
      <KeyboardComponent name="key_resp2">
        <Param name="allowedKeys" updates="constant" val="'left','right'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$corr_ans2" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="break_1">
      <TextComponent name="break_text">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="break_text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="30" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="As the United States Interstellar Messenger and Decoder, we understand how tiresome this job title is. You may take a much-needed break.&amp;#10;&amp;#10;If you wish to skip your break and continue, please press enter. " valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="breaktimer">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="breaktimer" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.6, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="30" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="$round(30.0 - t, ndigits = 1)" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="endbreak">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="endbreak" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="30" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="practice_round">
      <TextComponent name="input_text">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="input_text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="end">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="end" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="hcountprac">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="hcountprac" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.6, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$hcount" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_5">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="hcount = 0" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="hcount = 0;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;input_text.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;if ((practice_trials.thisN === 0)) {&amp;#10;    hcount = 0;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;input_text.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;&amp;#10;if practice_trials.thisN == 0:&amp;#10;    hcount = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        input_text.text = input_text.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        input_text.text = input_text.text[:-1]&amp;#10;    elif 'period' in keys:&amp;#10;        input_text.text = input_text.text + '.'&amp;#10;    elif 'comma' in keys:&amp;#10;        input_text.text = input_text.text + ','&amp;#10;    elif 'apostrophe' in keys:&amp;#10;        input_text.text = input_text.text + '\''&amp;#10;    elif 'question' in keys:&amp;#10;        input_text.text = input_text.text + '?'&amp;#10;    elif 'exclamation' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'at' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'pound' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'dollar' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'percent' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'asciicircum' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'ampersand' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'asterisk' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'parenleft' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'parenright' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'underscore' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'minus' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'equal' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'plus' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'bracketleft' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'bracketright' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'braceleft' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'braceright' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'semicolon' in keys:&amp;#10;        input_text.text = input_text.text + ';'&amp;#10;    elif 'colon' in keys:&amp;#10;        input_text.text = input_text.text + ':'&amp;#10;    elif 'doublequote' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'backslash' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'slash' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'greater' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'less' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'quoteleft' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'asciitilde' in keys:&amp;#10;        input_text.text = input_text.text + ''&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            input_text.text = input_text.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            input_text.text = input_text.text + keys[0]" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        input_text.text = (input_text.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            input_text.text = input_text.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;period&quot;, keys)) {&amp;#10;                input_text.text = (input_text.text + &quot;.&quot;);&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                    input_text.text = (input_text.text + &quot;,&quot;);&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;apostrophe&quot;, keys)) {&amp;#10;                        input_text.text = (input_text.text + &quot;'&quot;);&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;question&quot;, keys)) {&amp;#10;                            input_text.text = (input_text.text + &quot;?&quot;);&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;exclamation&quot;, keys)) {&amp;#10;                                input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;at&quot;, keys)) {&amp;#10;                                    input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;pound&quot;, keys)) {&amp;#10;                                        input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;dollar&quot;, keys)) {&amp;#10;                                            input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;percent&quot;, keys)) {&amp;#10;                                                input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;asciicircum&quot;, keys)) {&amp;#10;                                                    input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;ampersand&quot;, keys)) {&amp;#10;                                                        input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;asterisk&quot;, keys)) {&amp;#10;                                                            input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;parenleft&quot;, keys)) {&amp;#10;                                                                input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;parenright&quot;, keys)) {&amp;#10;                                                                    input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;underscore&quot;, keys)) {&amp;#10;                                                                        input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                                                    } else {&amp;#10;                                                                        if (_pj.in_es6(&quot;minus&quot;, keys)) {&amp;#10;                                                                            input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                                                        } else {&amp;#10;                                                                            if (_pj.in_es6(&quot;equal&quot;, keys)) {&amp;#10;                                                                                input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                                                            } else {&amp;#10;                                                                                if (_pj.in_es6(&quot;plus&quot;, keys)) {&amp;#10;                                                                                    input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                                                                } else {&amp;#10;                                                                                    if (_pj.in_es6(&quot;bracketleft&quot;, keys)) {&amp;#10;                                                                                        input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                                                                    } else {&amp;#10;                                                                                        if (_pj.in_es6(&quot;bracketright&quot;, keys)) {&amp;#10;                                                                                            input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                                                                        } else {&amp;#10;                                                                                            if (_pj.in_es6(&quot;braceleft&quot;, keys)) {&amp;#10;                                                                                                input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                                                                            } else {&amp;#10;                                                                                                if (_pj.in_es6(&quot;braceright&quot;, keys)) {&amp;#10;                                                                                                    input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                                                                                } else {&amp;#10;                                                                                                    if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                                                        input_text.text = (input_text.text + &quot;;&quot;);&amp;#10;                                                                                                    } else {&amp;#10;                                                                                                        if (_pj.in_es6(&quot;colon&quot;, keys)) {&amp;#10;                                                                                                            input_text.text = (input_text.text + &quot;:&quot;);&amp;#10;                                                                                                        } else {&amp;#10;                                                                                                            if (_pj.in_es6(&quot;doublequote&quot;, keys)) {&amp;#10;                                                                                                                input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                                                                                            } else {&amp;#10;                                                                                                                if (_pj.in_es6(&quot;backslash&quot;, keys)) {&amp;#10;                                                                                                                    input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                                                                                                } else {&amp;#10;                                                                                                                    if (_pj.in_es6(&quot;slash&quot;, keys)) {&amp;#10;                                                                                                                        input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                                                                                                    } else {&amp;#10;                                                                                                                        if (_pj.in_es6(&quot;greater&quot;, keys)) {&amp;#10;                                                                                                                            input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                                                                                                        } else {&amp;#10;                                                                                                                            if (_pj.in_es6(&quot;less&quot;, keys)) {&amp;#10;                                                                                                                                input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                                                                                                            } else {&amp;#10;                                                                                                                                if (_pj.in_es6(&quot;quoteleft&quot;, keys)) {&amp;#10;                                                                                                                                    input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                                                                                                                } else {&amp;#10;                                                                                                                                    if (_pj.in_es6(&quot;asciitilde&quot;, keys)) {&amp;#10;                                                                                                                                        input_text.text = (input_text.text + &quot;&quot;);&amp;#10;                                                                                                                                    } else {&amp;#10;                                                                                                                                        if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                                                                                                                                            modify = true;&amp;#10;                                                                                                                                        } else {&amp;#10;                                                                                                                                            if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                                                                                                                                                continueRoutine = false;&amp;#10;                                                                                                                                            } else {&amp;#10;                                                                                                                                                if (modify) {&amp;#10;                                                                                                                                                    input_text.text = (input_text.text + keys[0].upper());&amp;#10;                                                                                                                                                    modify = false;&amp;#10;                                                                                                                                                } else {&amp;#10;                                                                                                                                                    input_text.text = (input_text.text + keys[0]);&amp;#10;                                                                                                                                                }&amp;#10;                                                                                                                                            }&amp;#10;                                                                                                                                        }&amp;#10;                                                                                                                                    }&amp;#10;                                                                                                                                }&amp;#10;                                                                                                                            }&amp;#10;                                                                                                                        }&amp;#10;                                                                                                                    }&amp;#10;                                                                                                                }&amp;#10;                                                                                                            }&amp;#10;                                                                                                        }&amp;#10;                                                                                                    }&amp;#10;                                                                                                }&amp;#10;                                                                                            }&amp;#10;                                                                                        }&amp;#10;                                                                                    }&amp;#10;                                                                                }&amp;#10;                                                                            }&amp;#10;                                                                        }&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="thisExp.addData(&quot;practice input&quot;, input_text.text);&amp;#10;if ((input_text.text.length &gt;= 1)) {&amp;#10;    nextRoutineNreps = 1;&amp;#10;    hcount += 1;&amp;#10;} else {&amp;#10;    nextRoutineNreps = 0;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="thisExp.addData(&quot;practice input&quot;, input_text.text)&amp;#10;&amp;#10;if len(input_text.text) &gt;=1:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount += 1&amp;#10;else:&amp;#10;    nextRoutineNreps = 0" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_5" valType="code"/>
      </CodeComponent>
      <TextComponent name="displayhcount">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="displayhcount" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.4, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Hostage Count:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <PolygonComponent name="text_border">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-1,-1,-1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="text_border" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(0.9, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
    </Routine>
    <Routine name="practice_reinf">
      <ImageComponent name="hostage">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="/Users/hannah_checkeye/Desktop/UMW/Spring 2021/Verbal Shaping Experiment/stimuli:images/hostage1.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="hostage" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.3, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.3, 0.3)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <SoundComponent name="sound_1">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="hamming" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="sound_1" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="sound" updates="constant" val="/Users/hannah_checkeye/Desktop/UMW/Spring 2021/Verbal Shaping Experiment/stimuli:images/raygun.wav" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
        <Param name="volume" updates="constant" val="1" valType="code"/>
      </SoundComponent>
      <TextboxComponent name="hostagetext">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="autoLog" updates="constant" val="True" valType="bool"/>
        <Param name="bold" updates="constant" val="False" valType="bool"/>
        <Param name="borderColor" updates="constant" val="None" valType="str"/>
        <Param name="borderWidth" updates="constant" val="2" valType="num"/>
        <Param name="color" updates="constant" val="Black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="editable" updates="constant" val="False" valType="bool"/>
        <Param name="fillColor" updates="constant" val="None" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="italic" updates="constant" val="False" valType="bool"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="lineSpacing" updates="constant" val="1.0" valType="num"/>
        <Param name="name" updates="None" val="hostagetext" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="padding" updates="constant" val="None" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.2, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="A hostage was released!" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </TextboxComponent>
    </Routine>
    <Routine name="cont1reinforcement"/>
    <Routine name="cont1reinf">
      <ImageComponent name="hostage_2">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="/Users/hannah_checkeye/Desktop/UMW/Spring 2021/Verbal Shaping Experiment/stimuli:images/hostage1.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="hostage_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.3, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.3, 0.3)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <SoundComponent name="sound_2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="hamming" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="sound_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="sound" updates="constant" val="/Users/hannah_checkeye/Desktop/UMW/Spring 2021/Verbal Shaping Experiment/stimuli:images/raygun.wav" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
        <Param name="volume" updates="constant" val="1" valType="code"/>
      </SoundComponent>
      <TextboxComponent name="hostagetext_2">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="autoLog" updates="constant" val="True" valType="bool"/>
        <Param name="bold" updates="constant" val="False" valType="bool"/>
        <Param name="borderColor" updates="constant" val="None" valType="str"/>
        <Param name="borderWidth" updates="constant" val="2" valType="num"/>
        <Param name="color" updates="constant" val="Black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="editable" updates="constant" val="False" valType="bool"/>
        <Param name="fillColor" updates="constant" val="None" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="italic" updates="constant" val="False" valType="bool"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="lineSpacing" updates="constant" val="1.0" valType="num"/>
        <Param name="name" updates="None" val="hostagetext_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="padding" updates="constant" val="None" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.2, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="A hostage was released!" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </TextboxComponent>
    </Routine>
    <Routine name="cont2reinf">
      <ImageComponent name="hostage_3">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="/Users/hannah_checkeye/Desktop/UMW/Spring 2021/Verbal Shaping Experiment/stimuli:images/hostage1.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="hostage_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.3, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.3, 0.3)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <SoundComponent name="sound_3">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="hamming" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="sound_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="sound" updates="constant" val="/Users/hannah_checkeye/Desktop/UMW/Spring 2021/Verbal Shaping Experiment/stimuli:images/raygun.wav" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
        <Param name="volume" updates="constant" val="1" valType="code"/>
      </SoundComponent>
      <TextboxComponent name="hostagetext_3">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="autoLog" updates="constant" val="True" valType="bool"/>
        <Param name="bold" updates="constant" val="False" valType="bool"/>
        <Param name="borderColor" updates="constant" val="None" valType="str"/>
        <Param name="borderWidth" updates="constant" val="2" valType="num"/>
        <Param name="color" updates="constant" val="Black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="editable" updates="constant" val="False" valType="bool"/>
        <Param name="fillColor" updates="constant" val="None" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="italic" updates="constant" val="False" valType="bool"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="lineSpacing" updates="constant" val="1.0" valType="num"/>
        <Param name="name" updates="None" val="hostagetext_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="padding" updates="constant" val="None" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.2, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="A hostage was released!" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </TextboxComponent>
    </Routine>
    <Routine name="instructions_practice">
      <TextComponent name="practiceinstruct">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="practiceinstruct" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$practice_instructions" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_2">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="return_2">
        <Param name="color" updates="constant" val="red" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="code"/>
        <Param name="name" updates="None" val="return_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.45, -0.42)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Press return to continue" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="instructions_round1">
      <TextComponent name="textinstruct">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="textinstruct" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$instruct_1" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="return_3">
        <Param name="color" updates="constant" val="red" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="code"/>
        <Param name="name" updates="None" val="return_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.45, -0.42)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Press return to continue" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="conjunctions_text">
      <TextComponent name="text_6">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_7">
        <Param name="Before Experiment" updates="constant" val="import nltk" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="import * as nltk from 'nltk';&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;text_6.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;if ((trials_2.thisN === 0)) {&amp;#10;    hcount = 0;&amp;#10;}&amp;#10;if ((! countdownStarted)) {&amp;#10;    countdownClock = new core.CountdownTimer(600);&amp;#10;    countdownStarted = true;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;text_6.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;&amp;#10;if trials_2.thisN == 0:&amp;#10;    hcount = 0&amp;#10;    &amp;#10;if not countdownStarted:&amp;#10;    countdownClock = core.CountdownTimer(600) # 300 s = 5 minutes&amp;#10;    countdownStarted = True" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        text_6.text = text_6.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        text_6.text = text_6.text[:-1]&amp;#10;    elif 'period' in keys:&amp;#10;        text_6.text = text_6.text + '.'&amp;#10;    elif 'comma' in keys:&amp;#10;        text_6.text = text_6.text + ','&amp;#10;    elif 'apostrophe' in keys:&amp;#10;        text_6.text = text_6.text + '\''&amp;#10;    elif 'question' in keys:&amp;#10;        text_6.text = text_6.text + '?'&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            text_6.text = text_6.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            text_6.text = text_6.text + keys[0]&amp;#10;            &amp;#10;    &amp;#10;timeRemaining = countdownClock.getTime()&amp;#10;if timeRemaining &lt;= 0.0:&amp;#10;    continueRoutine = False # end this trial immediately&amp;#10;    trials_2.finished = True # and terminate the loop (use its actual name)&amp;#10;    countdownStarted = False # only necessary if you'll be using the countdown again elsewhere&amp;#10;else:&amp;#10;    minutes = int(timeRemaining/60.0) # the integer number of minutes&amp;#10;    seconds = int(timeRemaining - (minutes * 60.0))&amp;#10;    timeText2 = str(minutes) + ':' + str(seconds) # create a string of characters representing the time" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        text_6.text = (text_6.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            text_6.text = text_6.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;period&quot;, keys)) {&amp;#10;                text_6.text = (text_6.text + &quot;.&quot;);&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                    text_6.text = (text_6.text + &quot;,&quot;);&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;apostrophe&quot;, keys)) {&amp;#10;                        text_6.text = (text_6.text + &quot;'&quot;);&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;question&quot;, keys)) {&amp;#10;                            text_6.text = (text_6.text + &quot;?&quot;);&amp;#10;                        } else {&amp;#10;                            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                                modify = true;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                                    continueRoutine = false;&amp;#10;                                } else {&amp;#10;                                    if (modify) {&amp;#10;                                        text_6.text = (text_6.text + keys[0].upper());&amp;#10;                                        modify = false;&amp;#10;                                    } else {&amp;#10;                                        text_6.text = (text_6.text + keys[0]);&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;timeRemaining = countdownClock.getTime();&amp;#10;if ((timeRemaining &lt;= 0.0)) {&amp;#10;    continueRoutine = false;&amp;#10;    trials_2.finished = true;&amp;#10;    countdownStarted = false;&amp;#10;} else {&amp;#10;    minutes = Number.parseInt((timeRemaining / 60.0));&amp;#10;    seconds = Number.parseInt((timeRemaining - (minutes * 60.0)));&amp;#10;    timeText2 = ((minutes.toString() + &quot;:&quot;) + seconds.toString());&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="thisExp.addData(&quot;typedWord&quot;, text_6.text)&amp;#10;&amp;#10;displayed_text = text_6.text&amp;#10;print(displayed_text)&amp;#10;&amp;#10;sentences = nltk.word_tokenize(displayed_text)&amp;#10;words = [nltk.word_tokenize(word) for word in sentences]&amp;#10;tagged_words = [nltk.pos_tag(sent) for sent in words] #tagged_words is a list of lists of tuples (ordered pairs basically)&amp;#10;print(tagged_words)&amp;#10;&amp;#10;#make an empty freqDist object&amp;#10;tags = nltk.FreqDist()&amp;#10;        &amp;#10;#for each list in tagged words, get the (word, tag) tuple, ex. (action, 'NN')&amp;#10;# 'NN' is the tag in this case&amp;#10;for pairs in tagged_words:&amp;#10;    for word,tag in pairs:&amp;#10;        #add 1 to the counts for each tag&amp;#10;        tags[tag] += 1&amp;#10;        &amp;#10;#how to get (and print) the frequency of 'NN's&amp;#10;print(tags.freq('CC'))&amp;#10;        &amp;#10;#how to print the FreqDist object&amp;#10;print(tags.most_common())&amp;#10;        &amp;#10;#sums up the desired frequencies, k is the 'NN' or 'VRB' or whatever&amp;#10;freq_sum = 0&amp;#10;&amp;#10;for k in tags:&amp;#10;    #if it starts with capital n, its a noun, change this to 'V' if u want verbs&amp;#10;    if(k.startswith('CC')):&amp;#10;        freq_sum += tags.freq(k)&amp;#10;print(&quot;Frequency: &quot;, freq_sum)&amp;#10;print(&quot;Frequency (as %): &quot;, round((freq_sum*(100)),2))&amp;#10;    &amp;#10;if hcount &lt;= 3 and freq_sum &gt;= 0.2:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=6 and freq_sum &gt;= 0.4:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=9 and freq_sum &gt;= 0.5:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=12 and freq_sum &gt;= 0.6:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=15 and freq_sum &gt;= 0.7:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;else:&amp;#10;    nextRoutineNreps = 0" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_7" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="end_6">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="end_6" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="all keys" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="hcount_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="hcount_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.6, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$hcount" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="displayhcount_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="displayhcount_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.4, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Hostage Count:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="alien_2">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="/Users/hannah_checkeye/Desktop/UMW/Spring 2021/Verbal Shaping Experiment/stimuli:images/aliens2.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="alien_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.6, 0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.25, 0.25)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <PolygonComponent name="border_text_2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-1,-1,-1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="border_text_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(0.9, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="countdowntimer_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="countdowntimer_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.5, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="$timeText2" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="reinforcement">
      <ImageComponent name="hostage_4">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="hostage1.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="hostage_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.4, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.3, 0.3)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <SoundComponent name="sound_4">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="hamming" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="sound_4" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="sound" updates="constant" val="raygun.wav" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
        <Param name="volume" updates="constant" val="1" valType="code"/>
      </SoundComponent>
      <TextComponent name="releasenotify">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="releasenotify" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.2, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="A hostage has been released!" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="halfkeyboard_condition">
      <TextComponent name="text_5">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_4">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="countdownStarted = False" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="countdownStarted = false;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;text_5.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;if ((trials.thisN === 0)) {&amp;#10;    hcount = 0;&amp;#10;}&amp;#10;if ((! countdownStarted)) {&amp;#10;    countdownClock = new core.CountdownTimer(600);&amp;#10;    countdownStarted = true;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;text_5.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;&amp;#10;if trials.thisN == 0:&amp;#10;    hcount = 0&amp;#10;    &amp;#10;if not countdownStarted:&amp;#10;    countdownClock = core.CountdownTimer(600) # 300 s = 5 minutes&amp;#10;    countdownStarted = True" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        text_5.text = text_5.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        text_5.text = text_5.text[:-1]&amp;#10;    elif 'period' in keys:&amp;#10;        text_5.text = text_5.text + '.'&amp;#10;    elif 'comma' in keys:&amp;#10;        text_5.text = text_5.text + ','&amp;#10;    elif 'apostrophe' in keys:&amp;#10;        text_5.text = text_5.text + '\''&amp;#10;    elif 'question' in keys:&amp;#10;        text_5.text = text_5.text + '?'&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            text_5.text = text_5.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            text_5.text = text_5.text + keys[0]&amp;#10;            &amp;#10;timeRemaining = countdownClock.getTime()&amp;#10;if timeRemaining &lt;= 0.0:&amp;#10;    continueRoutine = False # end this trial immediately&amp;#10;    trials.finished = True # and terminate the loop (use its actual name)&amp;#10;    countdownStarted = False # only necessary if you'll be using the countdown again elsewhere&amp;#10;else:&amp;#10;    minutes = int(timeRemaining/60.0) # the integer number of minutes&amp;#10;    seconds = int(timeRemaining - (minutes * 60.0))&amp;#10;    timeText = str(minutes) + ':' + str(seconds) # create a string of characters representing the time" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        text_5.text = (text_5.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            text_5.text = text_5.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;period&quot;, keys)) {&amp;#10;                text_5.text = (text_5.text + &quot;.&quot;);&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                    text_5.text = (text_5.text + &quot;,&quot;);&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;apostrophe&quot;, keys)) {&amp;#10;                        text_5.text = (text_5.text + &quot;'&quot;);&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;question&quot;, keys)) {&amp;#10;                            text_5.text = (text_5.text + &quot;?&quot;);&amp;#10;                        } else {&amp;#10;                            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                                modify = true;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                                    continueRoutine = false;&amp;#10;                                } else {&amp;#10;                                    if (modify) {&amp;#10;                                        text_5.text = (text_5.text + keys[0].upper());&amp;#10;                                        modify = false;&amp;#10;                                    } else {&amp;#10;                                        text_5.text = (text_5.text + keys[0]);&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;timeRemaining = countdownClock.getTime();&amp;#10;if ((timeRemaining &lt;= 0.0)) {&amp;#10;    continueRoutine = false;&amp;#10;    trials.finished = true;&amp;#10;    countdownStarted = false;&amp;#10;} else {&amp;#10;    minutes = Number.parseInt((timeRemaining / 60.0));&amp;#10;    seconds = Number.parseInt((timeRemaining - (minutes * 60.0)));&amp;#10;    timeText = ((minutes.toString() + &quot;:&quot;) + seconds.toString());&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;thisExp.addData(&quot;typedWord&quot;, text_5.text);&amp;#10;displayed_text = text_5.text;&amp;#10;reinforced_letters = [&quot;z&quot;, &quot;x&quot;, &quot;d&quot;, &quot;g&quot;, &quot;y&quot;, &quot;i&quot;, &quot;h&quot;, &quot;u&quot;, &quot;a&quot;, &quot;l&quot;, &quot;c&quot;, &quot;p&quot;, &quot;n&quot;];&amp;#10;pointcount = 0;&amp;#10;for (var letter, _pj_c = 0, _pj_a = reinforced_letters, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    letter = _pj_a[_pj_c];&amp;#10;    if (_pj.in_es6(letter, text_5.text)) {&amp;#10;        pointcount += 1;&amp;#10;    }&amp;#10;}&amp;#10;if ((displayed_text.length &gt;= 1)) {&amp;#10;    frequency = (pointcount / displayed_text.length);&amp;#10;    console.log(&quot;Frequency: &quot;, frequency);&amp;#10;    console.log(&quot;Frequency (as %): &quot;, round((frequency * 100), 2));&amp;#10;} else {&amp;#10;    frequency = 0;&amp;#10;}&amp;#10;if (((hcount &lt;= 3) &amp;&amp; (frequency &gt;= 0.3))) {&amp;#10;    nextRoutineNreps = 1;&amp;#10;    hcount += 1;&amp;#10;} else {&amp;#10;    if (((hcount &lt;= 6) &amp;&amp; (frequency &gt;= 0.4))) {&amp;#10;        nextRoutineNreps = 1;&amp;#10;        hcount += 1;&amp;#10;    } else {&amp;#10;        if (((hcount &lt;= 9) &amp;&amp; (frequency &gt;= 0.5))) {&amp;#10;            nextRoutineNreps = 1;&amp;#10;            hcount += 1;&amp;#10;        } else {&amp;#10;            if (((hcount &lt;= 12) &amp;&amp; (frequency &gt;= 0.6))) {&amp;#10;                nextRoutineNreps = 1;&amp;#10;                hcount += 1;&amp;#10;            } else {&amp;#10;                if (((hcount &lt;= 15) &amp;&amp; (frequency &gt;= 0.7))) {&amp;#10;                    nextRoutineNreps = 1;&amp;#10;                    hcount += 1;&amp;#10;                } else {&amp;#10;                    nextRoutineNreps = 0;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="thisExp.addData(&quot;typedWord&quot;, text_5.text)&amp;#10;&amp;#10;displayed_text = text_5.text&amp;#10;&amp;#10;reinforced_letters = ['z', 'x', 'd', 'g', 'y', 'i', 'h', 'u', 'a', 'l', 'c', 'p', 'n']# and so on&amp;#10;pointcount = 0 &amp;#10;for letter in reinforced_letters:&amp;#10;    if letter in text_5.text:&amp;#10;        pointcount += 1&amp;#10;&amp;#10;if len(displayed_text) &gt;= 1:&amp;#10;    frequency = pointcount/(len(displayed_text))&amp;#10;    print(&quot;Frequency: &quot;,frequency)&amp;#10;    print(&quot;Frequency (as %): &quot;, round(frequency*100, 2))&amp;#10;else:&amp;#10;    frequency = 0&amp;#10;&amp;#10;if hcount &lt;= 3 and frequency &gt;= 0.3:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=6 and frequency &gt;= 0.4:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=9 and frequency &gt;= 0.5:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=12 and frequency &gt;= 0.6:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=15 and frequency &gt;= 0.7:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;else:&amp;#10;    nextRoutineNreps = 0" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_4" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="endroutine_2">
        <Param name="allowedKeys" updates="constant" val="'enter'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="endroutine_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="hcount_1">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="hcount_1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.6, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$hcount" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="displayhcount_1">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="displayhcount_1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.4, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Hostage Count:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="alien_1">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="/Users/hannah_checkeye/Desktop/UMW/Spring 2021/Verbal Shaping Experiment/stimuli:images/aliens1.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="alien_1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.6, 0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.25, 0.25)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <PolygonComponent name="box_text">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-1,-1,-1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="box_text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(0.9, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="countdowntimer">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="countdowntimer" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.5, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="$timeText" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="VAT1">
      <TextComponent name="sentence">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="sentence" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$sentences" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="choice1">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="choice1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.2, -0.2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$choice_a" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="choice2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="choice2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.2, -0.2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$choice_b" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="image">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="aliens1.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="image" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.6, 0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.3, 0.3)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="endchoice">
        <Param name="allowedKeys" updates="constant" val="'left', 'right'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$corr_ans" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="endchoice" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="VATrest">
      <TextComponent name="text_3">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="text_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="long_words">
      <TextComponent name="text_7">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_7" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_3">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="hcount = 0&amp;#10;&amp;#10;countdownStarted = False" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="hcount = 0;&amp;#10;countdownStarted = false;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;text_7.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;if ((! countdownStarted)) {&amp;#10;    countdownClock = new core.CountdownTimer(600);&amp;#10;    countdownStarted = true;&amp;#10;}&amp;#10;if ((trials.thisN === 0)) {&amp;#10;    hcount = 0;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;text_7.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;&amp;#10;if not countdownStarted:&amp;#10;    countdownClock = core.CountdownTimer(600) # 300 s = 5 minutes&amp;#10;    countdownStarted = True&amp;#10;    &amp;#10;if trials.thisN == 0:&amp;#10;    hcount = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        text_7.text = text_7.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        text_7.text = text_7.text[:-1]&amp;#10;    elif 'period' in keys:&amp;#10;        text_7.text = text_7.text + '.'&amp;#10;    elif 'comma' in keys:&amp;#10;        text_7.text = text_7.text + ','&amp;#10;    elif 'apostrophe' in keys:&amp;#10;        text_7.text = text_7.text + '\''&amp;#10;    elif 'question' in keys:&amp;#10;        text_7.text = text_7.text + '?'&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            text_7.text = text_7.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            text_7.text = text_7.text + keys[0]&amp;#10;                &amp;#10;timeRemaining = countdownClock.getTime()&amp;#10;if timeRemaining &lt;= 0.0:&amp;#10;    continueRoutine = False # end this trial immediately&amp;#10;    trials.finished = True # and terminate the loop (use its actual name)&amp;#10;    countdownStarted = False # only necessary if you'll be using the countdown again elsewhere&amp;#10;else:&amp;#10;    minutes = int(timeRemaining/60.0) # the integer number of minutes&amp;#10;    seconds = int(timeRemaining - (minutes * 60.0))&amp;#10;    timeText = str(minutes) + ':' + str(seconds) # create a string of characters representing the time" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        text_7.text = (text_7.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            text_7.text = text_7.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;period&quot;, keys)) {&amp;#10;                text_7.text = (text_7.text + &quot;.&quot;);&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                    text_7.text = (text_7.text + &quot;,&quot;);&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;apostrophe&quot;, keys)) {&amp;#10;                        text_7.text = (text_7.text + &quot;'&quot;);&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;question&quot;, keys)) {&amp;#10;                            text_7.text = (text_7.text + &quot;?&quot;);&amp;#10;                        } else {&amp;#10;                            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                                modify = true;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                                    continueRoutine = false;&amp;#10;                                } else {&amp;#10;                                    if (modify) {&amp;#10;                                        text_7.text = (text_7.text + keys[0].upper());&amp;#10;                                        modify = false;&amp;#10;                                    } else {&amp;#10;                                        text_7.text = (text_7.text + keys[0]);&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;timeRemaining = countdownClock.getTime();&amp;#10;if ((timeRemaining &lt;= 0.0)) {&amp;#10;    continueRoutine = false;&amp;#10;    trials.finished = true;&amp;#10;    countdownStarted = false;&amp;#10;} else {&amp;#10;    minutes = Number.parseInt((timeRemaining / 60.0));&amp;#10;    seconds = Number.parseInt((timeRemaining - (minutes * 60.0)));&amp;#10;    timeText = ((minutes.toString() + &quot;:&quot;) + seconds.toString());&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="thisExp.addData(&quot;typedWord&quot;, text_7.text)&amp;#10;&amp;#10;displayed_text = text_7.text&amp;#10;words = displayed_text.split()&amp;#10;&amp;#10;if len(words) &gt;= 1:&amp;#10;    average_word_length = sum(len(word) for word in words) / len(words)&amp;#10;    print(average_word_length)&amp;#10;else: &amp;#10;    average_word_length = 0&amp;#10;&amp;#10;if hcount &lt;= 3 and average_word_length &gt;= 4:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=6 and average_word_length &gt;= 4.25:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=9 and average_word_length &gt;= 4.5:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=12 and average_word_length &gt;= 4.75:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=15 and average_word_length &gt;= 5:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=18 and average_word_length &gt;= 5.25:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=21 and average_word_length &gt;= 5.5:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;else:&amp;#10;    nextRoutineNreps = 0" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_3" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="endroutine_3">
        <Param name="allowedKeys" updates="constant" val="'enter'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="endroutine_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="actualcount">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="actualcount" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.6, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$hcount" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="countdowntimer_3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="countdowntimer_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.5, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="$timeText" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="displaytitlehcount">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="displaytitlehcount" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.4, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Hostage Count:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="red_alien">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="/Users/hannah_checkeye/Desktop/UMW/Spring 2021/Verbal Shaping Experiment/stimuli:images/aliens1.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="red_alien" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.6, 0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.25, 0.25)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <PolygonComponent name="border_text">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-1,-1,-1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="border_text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(0.9, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
    </Routine>
    <Routine name="short_words">
      <TextComponent name="text_8">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_8" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_6">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="hcount = 0&amp;#10;&amp;#10;countdownStarted = False" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="hcount = 0;&amp;#10;countdownStarted = false;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;text_8.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;if ((! countdownStarted)) {&amp;#10;    countdownClock = new core.CountdownTimer(600);&amp;#10;    countdownStarted = true;&amp;#10;}&amp;#10;if ((trials_2.thisN === 0)) {&amp;#10;    hcount = 0;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;text_8.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;&amp;#10;if not countdownStarted:&amp;#10;    countdownClock = core.CountdownTimer(600) # 300 s = 5 minutes&amp;#10;    countdownStarted = True&amp;#10; &amp;#10;if trials_2.thisN == 0:&amp;#10;    hcount = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        text_8.text = text_8.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        text_8.text = text_8.text[:-1]&amp;#10;    elif 'period' in keys:&amp;#10;        text_8.text = text_8.text + '.'&amp;#10;    elif 'comma' in keys:&amp;#10;        text_8.text = text_8.text + ','&amp;#10;    elif 'apostrophe' in keys:&amp;#10;        text_8.text = text_8.text + '\''&amp;#10;    elif 'question' in keys:&amp;#10;        text_8.text = text_8.text + '?'&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            text_8.text = text_8.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            text_8.text = text_8.text + keys[0]&amp;#10;            &amp;#10;timeRemaining = countdownClock.getTime()&amp;#10;if timeRemaining &lt;= 0.0:&amp;#10;    continueRoutine = False # end this trial immediately&amp;#10;    trials_2.finished = True # and terminate the loop (use its actual name)&amp;#10;    countdownStarted = False # only necessary if you'll be using the countdown again elsewhere&amp;#10;else:&amp;#10;    minutes = int(timeRemaining/60.0) # the integer number of minutes&amp;#10;    seconds = int(timeRemaining - (minutes * 60.0))&amp;#10;    timeText = str(minutes) + ':' + str(seconds) # create a string of characters representing the time" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        text_8.text = (text_8.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            text_8.text = text_8.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;period&quot;, keys)) {&amp;#10;                text_8.text = (text_8.text + &quot;.&quot;);&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                    text_8.text = (text_8.text + &quot;,&quot;);&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;apostrophe&quot;, keys)) {&amp;#10;                        text_8.text = (text_8.text + &quot;'&quot;);&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;question&quot;, keys)) {&amp;#10;                            text_8.text = (text_8.text + &quot;?&quot;);&amp;#10;                        } else {&amp;#10;                            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                                modify = true;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                                    continueRoutine = false;&amp;#10;                                } else {&amp;#10;                                    if (modify) {&amp;#10;                                        text_8.text = (text_8.text + keys[0].upper());&amp;#10;                                        modify = false;&amp;#10;                                    } else {&amp;#10;                                        text_8.text = (text_8.text + keys[0]);&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;timeRemaining = countdownClock.getTime();&amp;#10;if ((timeRemaining &lt;= 0.0)) {&amp;#10;    continueRoutine = false;&amp;#10;    trials_2.finished = true;&amp;#10;    countdownStarted = false;&amp;#10;} else {&amp;#10;    minutes = Number.parseInt((timeRemaining / 60.0));&amp;#10;    seconds = Number.parseInt((timeRemaining - (minutes * 60.0)));&amp;#10;    timeText = ((minutes.toString() + &quot;:&quot;) + seconds.toString());&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="thisExp.addData(&quot;typedWord&quot;, text_8.text)&amp;#10;&amp;#10;displayed_text = text_8.text&amp;#10;words = displayed_text.split()&amp;#10;&amp;#10;if len(words) &gt;= 1:&amp;#10;    average_word_length = sum(len(word) for word in words) / len(words)&amp;#10;    print(average_word_length)&amp;#10;else: &amp;#10;    average_word_length = 0&amp;#10;&amp;#10;if hcount &lt;= 3 and average_word_length &lt;= 4 and average_word_length&gt;=1:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=6 and average_word_length &lt;= 3.75 and average_word_length&gt;=1:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=9 and average_word_length &lt;= 3.5 and average_word_length&gt;=1:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=12 and average_word_length &lt;= 3.25 and average_word_length&gt;=1:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=15 and average_word_length &lt;= 3 and average_word_length&gt;=1:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=18 and average_word_length &lt;= 2.75 and average_word_length&gt;=1:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=21 and average_word_length &lt;= 2.5 and average_word_length&gt;=1:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;else:&amp;#10;    nextRoutineNreps = 0" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_6" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="endroutine_4">
        <Param name="allowedKeys" updates="constant" val="'enter'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="endroutine_4" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="showtimer">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="showtimer" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.5, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="$timeText" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="actualcount_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="actualcount_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.6, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$hcount" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="displaytitlehcount_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="displaytitlehcount_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.4, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Hostage Count:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <PolygonComponent name="border_text_3">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-1,-1,-1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="border_text_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(0.9, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <ImageComponent name="green_alien">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="/Users/hannah_checkeye/Desktop/UMW/Spring 2021/Verbal Shaping Experiment/stimuli:images/aliens2.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="green_alien" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.6, 0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.25, 0.25)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="adjectives_text">
      <TextComponent name="text_9">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_9" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_8">
        <Param name="Before Experiment" updates="constant" val="import nltk" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="import * as nltk from 'nltk';&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="hcount = 0&amp;#10;countdownStarted = False" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="hcount = 0;&amp;#10;countdownStarted = false;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;text_9.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;if ((! countdownStarted)) {&amp;#10;    countdownClock = new core.CountdownTimer(600);&amp;#10;    countdownStarted = true;&amp;#10;}&amp;#10;if ((trials.thisN === 0)) {&amp;#10;    hcount = 0;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;text_9.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;&amp;#10;if not countdownStarted:&amp;#10;    countdownClock = core.CountdownTimer(600) # 300 s = 5 minutes&amp;#10;    countdownStarted = True&amp;#10; &amp;#10;if trials.thisN == 0:&amp;#10;    hcount = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        text_9.text = text_9.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        text_9.text = text_9.text[:-1]&amp;#10;    elif 'period' in keys:&amp;#10;        text_9.text = text_9.text + '.'&amp;#10;    elif 'comma' in keys:&amp;#10;        text_9.text = text_9.text + ','&amp;#10;    elif 'apostrophe' in keys:&amp;#10;        text_9.text = text_9.text + '\''&amp;#10;    elif 'question' in keys:&amp;#10;        text_9.text = text_9.text + '?'&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            text_9.text = text_9.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            text_9.text = text_9.text + keys[0]&amp;#10;            &amp;#10;timeRemaining = countdownClock.getTime()&amp;#10;if timeRemaining &lt;= 0.0:&amp;#10;    continueRoutine = False # end this trial immediately&amp;#10;    trials.finished = True # and terminate the loop (use its actual name)&amp;#10;    countdownStarted = False # only necessary if you'll be using the countdown again elsewhere&amp;#10;else:&amp;#10;    minutes = int(timeRemaining/60.0) # the integer number of minutes&amp;#10;    seconds = int(timeRemaining - (minutes * 60.0))&amp;#10;    timeText = str(minutes) + ':' + str(seconds) # create a string of characters representing the time" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        text_9.text = (text_9.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            text_9.text = text_9.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;period&quot;, keys)) {&amp;#10;                text_9.text = (text_9.text + &quot;.&quot;);&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                    text_9.text = (text_9.text + &quot;,&quot;);&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;apostrophe&quot;, keys)) {&amp;#10;                        text_9.text = (text_9.text + &quot;'&quot;);&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;question&quot;, keys)) {&amp;#10;                            text_9.text = (text_9.text + &quot;?&quot;);&amp;#10;                        } else {&amp;#10;                            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                                modify = true;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                                    continueRoutine = false;&amp;#10;                                } else {&amp;#10;                                    if (modify) {&amp;#10;                                        text_9.text = (text_9.text + keys[0].upper());&amp;#10;                                        modify = false;&amp;#10;                                    } else {&amp;#10;                                        text_9.text = (text_9.text + keys[0]);&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;timeRemaining = countdownClock.getTime();&amp;#10;if ((timeRemaining &lt;= 0.0)) {&amp;#10;    continueRoutine = false;&amp;#10;    trials.finished = true;&amp;#10;    countdownStarted = false;&amp;#10;} else {&amp;#10;    minutes = Number.parseInt((timeRemaining / 60.0));&amp;#10;    seconds = Number.parseInt((timeRemaining - (minutes * 60.0)));&amp;#10;    timeText = ((minutes.toString() + &quot;:&quot;) + seconds.toString());&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="thisExp.addData(&quot;typedWord&quot;, text_9.text)&amp;#10;&amp;#10;displayed_text = text_9.text&amp;#10;print(displayed_text)&amp;#10;&amp;#10;sentences = nltk.word_tokenize(displayed_text)&amp;#10;words = [nltk.word_tokenize(word) for word in sentences]&amp;#10;tagged_words = [nltk.pos_tag(sent) for sent in words] #tagged_words is a list of lists of tuples (ordered pairs basically)&amp;#10;print(tagged_words)&amp;#10;&amp;#10;#make an empty freqDist object&amp;#10;tags = nltk.FreqDist()&amp;#10;        &amp;#10;#for each list in tagged words, get the (word, tag) tuple, ex. (action, 'NN')&amp;#10;# 'NN' is the tag in this case&amp;#10;for pairs in tagged_words:&amp;#10;    for word,tag in pairs:&amp;#10;        #add 1 to the counts for each tag&amp;#10;        tags[tag] += 1&amp;#10;        &amp;#10;#how to get (and print) the frequency of 'NN's&amp;#10;print(tags.freq('JJ'))&amp;#10;        &amp;#10;#how to print the FreqDist object&amp;#10;print(tags.most_common())&amp;#10;        &amp;#10;#sums up the desired frequencies, k is the 'NN' or 'VRB' or whatever&amp;#10;freq_sum = 0&amp;#10;for k in tags:&amp;#10;    #if it starts with capital n, its a noun, change this to 'V' if u want verbs&amp;#10;    if(k.startswith('JJ')):&amp;#10;        freq_sum += tags.freq(k)&amp;#10;print(&quot;Frequency: &quot;, freq_sum)&amp;#10;print(&quot;Frequency (as %): &quot;, round((freq_sum*(100)),2))&amp;#10;    &amp;#10;if hcount &lt;= 3 and freq_sum &gt;= 0.2:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=6 and freq_sum &gt;= 0.3:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=9 and freq_sum &gt;= 0.4:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=12 and freq_sum &gt;= 0.5:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=15 and freq_sum &gt;= 0.6:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=18 and freq_sum &gt;= 0.7:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;else:&amp;#10;    nextRoutineNreps = 0" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_8" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="end_2">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="end_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="all keys" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <ImageComponent name="red_alien_2">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="/Users/hannah_checkeye/Desktop/UMW/Spring 2021/Verbal Shaping Experiment/stimuli:images/aliens1.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="red_alien_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.6, 0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.25, 0.25)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <TextComponent name="showtimer_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="showtimer_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.5, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="$timeText" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="actualhcount_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="actualhcount_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.6, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$hcount" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="displayhcount_3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="displayhcount_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.4, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Hostage Count:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <PolygonComponent name="textborder_2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-1,-1,-1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="textborder_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(0.9, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
    </Routine>
    <Routine name="verb_text">
      <TextComponent name="text_10">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_10" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_9">
        <Param name="Before Experiment" updates="constant" val="import nltk" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="import * as nltk from 'nltk';&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="hcount = 0&amp;#10;countdownStarted = False" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="hcount = 0;&amp;#10;countdownStarted = false;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;text_10.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;if ((! countdownStarted)) {&amp;#10;    countdownClock = new core.CountdownTimer(600);&amp;#10;    countdownStarted = true;&amp;#10;}&amp;#10;if ((trials_2.thisN === 0)) {&amp;#10;    hcount = 0;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;text_10.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;&amp;#10;if not countdownStarted:&amp;#10;    countdownClock = core.CountdownTimer(600) # 300 s = 5 minutes&amp;#10;    countdownStarted = True&amp;#10; &amp;#10;if trials_2.thisN == 0:&amp;#10;    hcount = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        text_10.text = text_10.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        text_10.text = text_10.text[:-1]&amp;#10;    elif 'period' in keys:&amp;#10;        text_10.text = text_10.text + '.'&amp;#10;    elif 'comma' in keys:&amp;#10;        text_10.text = text_10.text + ','&amp;#10;    elif 'apostrophe' in keys:&amp;#10;        text_10.text = text_10.text + '\''&amp;#10;    elif 'question' in keys:&amp;#10;        text_10.text = text_10.text + '?'&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            text_10.text = text_10.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            text_10.text = text_10.text + keys[0]&amp;#10;            &amp;#10;timeRemaining = countdownClock.getTime()&amp;#10;if timeRemaining &lt;= 0.0:&amp;#10;    continueRoutine = False # end this trial immediately&amp;#10;    trials_2.finished = True # and terminate the loop (use its actual name)&amp;#10;    countdownStarted = False # only necessary if you'll be using the countdown again elsewhere&amp;#10;else:&amp;#10;    minutes = int(timeRemaining/60.0) # the integer number of minutes&amp;#10;    seconds = int(timeRemaining - (minutes * 60.0))&amp;#10;    timeText = str(minutes) + ':' + str(seconds) # create a string of characters representing the time" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        text_10.text = (text_10.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            text_10.text = text_10.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;period&quot;, keys)) {&amp;#10;                text_10.text = (text_10.text + &quot;.&quot;);&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                    text_10.text = (text_10.text + &quot;,&quot;);&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;apostrophe&quot;, keys)) {&amp;#10;                        text_10.text = (text_10.text + &quot;'&quot;);&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;question&quot;, keys)) {&amp;#10;                            text_10.text = (text_10.text + &quot;?&quot;);&amp;#10;                        } else {&amp;#10;                            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                                modify = true;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                                    continueRoutine = false;&amp;#10;                                } else {&amp;#10;                                    if (modify) {&amp;#10;                                        text_10.text = (text_10.text + keys[0].upper());&amp;#10;                                        modify = false;&amp;#10;                                    } else {&amp;#10;                                        text_10.text = (text_10.text + keys[0]);&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;timeRemaining = countdownClock.getTime();&amp;#10;if ((timeRemaining &lt;= 0.0)) {&amp;#10;    continueRoutine = false;&amp;#10;    trials_2.finished = true;&amp;#10;    countdownStarted = false;&amp;#10;} else {&amp;#10;    minutes = Number.parseInt((timeRemaining / 60.0));&amp;#10;    seconds = Number.parseInt((timeRemaining - (minutes * 60.0)));&amp;#10;    timeText = ((minutes.toString() + &quot;:&quot;) + seconds.toString());&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="thisExp.addData(&quot;typedWord&quot;, text_10.text)&amp;#10;&amp;#10;displayed_text = text_10.text&amp;#10;print(displayed_text)&amp;#10;&amp;#10;sentences = nltk.word_tokenize(displayed_text)&amp;#10;words = [nltk.word_tokenize(word) for word in sentences]&amp;#10;tagged_words = [nltk.pos_tag(sent) for sent in words] #tagged_words is a list of lists of tuples (ordered pairs basically)&amp;#10;print(tagged_words)&amp;#10;&amp;#10;#make an empty freqDist object&amp;#10;tags = nltk.FreqDist()&amp;#10;        &amp;#10;#for each list in tagged words, get the (word, tag) tuple, ex. (action, 'NN')&amp;#10;# 'NN' is the tag in this case&amp;#10;for pairs in tagged_words:&amp;#10;    for word,tag in pairs:&amp;#10;        #add 1 to the counts for each tag&amp;#10;        tags[tag] += 1&amp;#10;        &amp;#10;#how to get (and print) the frequency of 'NN's&amp;#10;print(tags.freq('VB'))&amp;#10;        &amp;#10;#how to print the FreqDist object&amp;#10;print(tags.most_common())&amp;#10;        &amp;#10;#sums up the desired frequencies, k is the 'NN' or 'VRB' or whatever&amp;#10;freq_sum = 0&amp;#10;for k in tags:&amp;#10;    #if it starts with capital n, its a noun, change this to 'V' if u want verbs&amp;#10;    if(k.startswith('VB')):&amp;#10;        freq_sum += tags.freq(k)&amp;#10;print(&quot;Frequency: &quot;, freq_sum)&amp;#10;print(&quot;Frequency (as %): &quot;, round((freq_sum*(100)),2))&amp;#10;    &amp;#10;if hcount &lt;= 3 and freq_sum &gt;= 0.2:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=6 and freq_sum &gt;= 0.3:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=9 and freq_sum &gt;= 0.4:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=12 and freq_sum &gt;= 0.5:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=15 and freq_sum &gt;= 0.6:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=18 and freq_sum &gt;= 0.7:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;else:&amp;#10;    nextRoutineNreps = 0" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_9" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="end_3">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="end_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="all keys" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <ImageComponent name="green_alien_2">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="/Users/hannah_checkeye/Desktop/UMW/Spring 2021/Verbal Shaping Experiment/stimuli:images/aliens2.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="green_alien_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.6, 0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.25, 0.25)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <TextComponent name="showtimer_3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="showtimer_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.5, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="$timeText" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="actualhcount">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="actualhcount" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.6, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$hcount" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="displayhcount_4">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="displayhcount_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.4, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Hostage Count:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <PolygonComponent name="textborder">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-1,-1,-1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="textborder" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(0.9, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
    </Routine>
    <Routine name="adverbs_text">
      <TextComponent name="text_12">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_12" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_11">
        <Param name="Before Experiment" updates="constant" val="import nltk" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="import * as nltk from 'nltk';&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="hcount = 0&amp;#10;countdownStarted = False" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="hcount = 0;&amp;#10;countdownStarted = false;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;text_12.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;if ((! countdownStarted)) {&amp;#10;    countdownClock = new core.CountdownTimer(600);&amp;#10;    countdownStarted = true;&amp;#10;}&amp;#10;if ((trials_2.thisN === 0)) {&amp;#10;    hcount = 0;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;text_12.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;&amp;#10;if not countdownStarted:&amp;#10;    countdownClock = core.CountdownTimer(600) # 300 s = 5 minutes&amp;#10;    countdownStarted = True&amp;#10; &amp;#10;if trials_2.thisN == 0:&amp;#10;    hcount = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        text_12.text = text_12.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        text_12.text = text_12.text[:-1]&amp;#10;    elif 'period' in keys:&amp;#10;        text_12.text = text_12.text + '.'&amp;#10;    elif 'comma' in keys:&amp;#10;        text_12.text = text_12.text + ','&amp;#10;    elif 'apostrophe' in keys:&amp;#10;        text_12.text = text_12.text + '\''&amp;#10;    elif 'question' in keys:&amp;#10;        text_12.text = text_12.text + '?'&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            text_12.text = text_12.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            text_12.text = text_12.text + keys[0]&amp;#10;            &amp;#10;timeRemaining = countdownClock.getTime()&amp;#10;if timeRemaining &lt;= 0.0:&amp;#10;    continueRoutine = False # end this trial immediately&amp;#10;    trials_2.finished = True # and terminate the loop (use its actual name)&amp;#10;    countdownStarted = False # only necessary if you'll be using the countdown again elsewhere&amp;#10;else:&amp;#10;    minutes = int(timeRemaining/60.0) # the integer number of minutes&amp;#10;    seconds = int(timeRemaining - (minutes * 60.0))&amp;#10;    timeText = str(minutes) + ':' + str(seconds) # create a string of characters representing the time" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        text_12.text = (text_12.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            text_12.text = text_12.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;period&quot;, keys)) {&amp;#10;                text_12.text = (text_12.text + &quot;.&quot;);&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                    text_12.text = (text_12.text + &quot;,&quot;);&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;apostrophe&quot;, keys)) {&amp;#10;                        text_12.text = (text_12.text + &quot;'&quot;);&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;question&quot;, keys)) {&amp;#10;                            text_12.text = (text_12.text + &quot;?&quot;);&amp;#10;                        } else {&amp;#10;                            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                                modify = true;&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                                    continueRoutine = false;&amp;#10;                                } else {&amp;#10;                                    if (modify) {&amp;#10;                                        text_12.text = (text_12.text + keys[0].upper());&amp;#10;                                        modify = false;&amp;#10;                                    } else {&amp;#10;                                        text_12.text = (text_12.text + keys[0]);&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;timeRemaining = countdownClock.getTime();&amp;#10;if ((timeRemaining &lt;= 0.0)) {&amp;#10;    continueRoutine = false;&amp;#10;    trials_2.finished = true;&amp;#10;    countdownStarted = false;&amp;#10;} else {&amp;#10;    minutes = Number.parseInt((timeRemaining / 60.0));&amp;#10;    seconds = Number.parseInt((timeRemaining - (minutes * 60.0)));&amp;#10;    timeText = ((minutes.toString() + &quot;:&quot;) + seconds.toString());&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="thisExp.addData(&quot;typedWord&quot;, text_12.text)&amp;#10;&amp;#10;displayed_text = text_12.text&amp;#10;print(displayed_text)&amp;#10;&amp;#10;sentences = nltk.word_tokenize(displayed_text)&amp;#10;words = [nltk.word_tokenize(word) for word in sentences]&amp;#10;tagged_words = [nltk.pos_tag(sent) for sent in words] #tagged_words is a list of lists of tuples (ordered pairs basically)&amp;#10;print(tagged_words)&amp;#10;&amp;#10;#make an empty freqDist object&amp;#10;tags = nltk.FreqDist()&amp;#10;        &amp;#10;#for each list in tagged words, get the (word, tag) tuple, ex. (action, 'NN')&amp;#10;# 'NN' is the tag in this case&amp;#10;for pairs in tagged_words:&amp;#10;    for word,tag in pairs:&amp;#10;        #add 1 to the counts for each tag&amp;#10;        tags[tag] += 1&amp;#10;        &amp;#10;#how to get (and print) the frequency of 'NN's&amp;#10;print(tags.freq('RB'))&amp;#10;        &amp;#10;#how to print the FreqDist object&amp;#10;print(tags.most_common())&amp;#10;        &amp;#10;#sums up the desired frequencies, k is the 'NN' or 'VRB' or whatever&amp;#10;freq_sum = 0&amp;#10;for k in tags:&amp;#10;    #if it starts with capital n, its a noun, change this to 'V' if u want verbs&amp;#10;    if(k.startswith('RB')):&amp;#10;        freq_sum += tags.freq(k)&amp;#10;print(&quot;Frequency: &quot;, freq_sum)&amp;#10;print(&quot;Frequency (as %): &quot;, round((freq_sum*(100)),2))&amp;#10;    &amp;#10;if hcount &lt;= 3 and freq_sum &gt;= 0.2:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=6 and freq_sum &gt;= 0.3:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=9 and freq_sum &gt;= 0.4:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=12 and freq_sum &gt;= 0.5:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=15 and freq_sum &gt;= 0.6:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=18 and freq_sum &gt;= 0.7:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;else:&amp;#10;    nextRoutineNreps = 0" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_11" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="end_5">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="end_5" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="all keys" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <ImageComponent name="green_alien_3">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="/Users/hannah_checkeye/Desktop/UMW/Spring 2021/Verbal Shaping Experiment/stimuli:images/aliens2.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="green_alien_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.6, 0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.25, 0.25)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <TextComponent name="showtimer_5">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="showtimer_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.5, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="$timeText" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="actualhcount_3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="actualhcount_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.6, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$hcount" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="displayhcount_6">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="displayhcount_6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.4, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Hostage Count:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <PolygonComponent name="textborder_3">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-1,-1,-1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="textborder_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(0.9, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
    </Routine>
    <Routine name="prepositions_text">
      <TextComponent name="text_13">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_13" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_12">
        <Param name="Before Experiment" updates="constant" val="import nltk" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="import * as nltk from 'nltk';&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="hcount = 0&amp;#10;countdownStarted = False" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="hcount = 0;&amp;#10;countdownStarted = false;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;text_13.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;if ((! countdownStarted)) {&amp;#10;    countdownClock = new core.CountdownTimer(600);&amp;#10;    countdownStarted = true;&amp;#10;}&amp;#10;if ((trials_2.thisN === 0)) {&amp;#10;    hcount = 0;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;text_13.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;&amp;#10;if not countdownStarted:&amp;#10;    countdownClock = core.CountdownTimer(600) # 300 s = 5 minutes&amp;#10;    countdownStarted = True&amp;#10; &amp;#10;if trials_2.thisN == 0:&amp;#10;    hcount = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        text_13.text = text_13.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        text_13.text = text_13.text[:-1]&amp;#10;    elif 'period' in keys:&amp;#10;        text_13.text = text_13.text + '.'&amp;#10;    elif 'comma' in keys:&amp;#10;        text_13.text = text_13.text + ','&amp;#10;    elif 'apostrophe' in keys:&amp;#10;        text_13.text = text_13.text + '\''&amp;#10;    elif 'question' in keys:&amp;#10;        text_13.text = text_13.text + '?'&amp;#10;    elif 'exclamation' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'at' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'pound' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'dollar' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'percent' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'asciicircum' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'ampersand' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'asterisk' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'parenleft' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'parenright' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'underscore' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'minus' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'equal' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'plus' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'bracketleft' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'bracketright' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'braceleft' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'braceright' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'semicolon' in keys:&amp;#10;        text_13.text = text_13.text + ';'&amp;#10;    elif 'colon' in keys:&amp;#10;        text_13.text = text_13.text + ':'&amp;#10;    elif 'doublequote' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'backslash' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'slash' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'greater' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'less' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'quoteleft' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'asciitilde' in keys:&amp;#10;        text_13.text = text_13.text + ''&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            text_13.text = text_13.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            text_13.text = text_13.text + keys[0]&amp;#10;            &amp;#10;timeRemaining = countdownClock.getTime()&amp;#10;if timeRemaining &lt;= 0.0:&amp;#10;    continueRoutine = False # end this trial immediately&amp;#10;    trials_2.finished = True # and terminate the loop (use its actual name)&amp;#10;    countdownStarted = False # only necessary if you'll be using the countdown again elsewhere&amp;#10;else:&amp;#10;    minutes = int(timeRemaining/60.0) # the integer number of minutes&amp;#10;    seconds = int(timeRemaining - (minutes * 60.0))&amp;#10;    timeText = str(minutes) + ':' + str(seconds) # create a string of characters representing the time" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        text_13.text = (text_13.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            text_13.text = text_13.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;period&quot;, keys)) {&amp;#10;                text_13.text = (text_13.text + &quot;.&quot;);&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                    text_13.text = (text_13.text + &quot;,&quot;);&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;apostrophe&quot;, keys)) {&amp;#10;                        text_13.text = (text_13.text + &quot;'&quot;);&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;question&quot;, keys)) {&amp;#10;                            text_13.text = (text_13.text + &quot;?&quot;);&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;exclamation&quot;, keys)) {&amp;#10;                                text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;at&quot;, keys)) {&amp;#10;                                    text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;pound&quot;, keys)) {&amp;#10;                                        text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;dollar&quot;, keys)) {&amp;#10;                                            text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;percent&quot;, keys)) {&amp;#10;                                                text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;asciicircum&quot;, keys)) {&amp;#10;                                                    text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;ampersand&quot;, keys)) {&amp;#10;                                                        text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;asterisk&quot;, keys)) {&amp;#10;                                                            text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;parenleft&quot;, keys)) {&amp;#10;                                                                text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;parenright&quot;, keys)) {&amp;#10;                                                                    text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;underscore&quot;, keys)) {&amp;#10;                                                                        text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                                                    } else {&amp;#10;                                                                        if (_pj.in_es6(&quot;minus&quot;, keys)) {&amp;#10;                                                                            text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                                                        } else {&amp;#10;                                                                            if (_pj.in_es6(&quot;equal&quot;, keys)) {&amp;#10;                                                                                text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                                                            } else {&amp;#10;                                                                                if (_pj.in_es6(&quot;plus&quot;, keys)) {&amp;#10;                                                                                    text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                                                                } else {&amp;#10;                                                                                    if (_pj.in_es6(&quot;bracketleft&quot;, keys)) {&amp;#10;                                                                                        text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                                                                    } else {&amp;#10;                                                                                        if (_pj.in_es6(&quot;bracketright&quot;, keys)) {&amp;#10;                                                                                            text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                                                                        } else {&amp;#10;                                                                                            if (_pj.in_es6(&quot;braceleft&quot;, keys)) {&amp;#10;                                                                                                text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                                                                            } else {&amp;#10;                                                                                                if (_pj.in_es6(&quot;braceright&quot;, keys)) {&amp;#10;                                                                                                    text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                                                                                } else {&amp;#10;                                                                                                    if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                                                        text_13.text = (text_13.text + &quot;;&quot;);&amp;#10;                                                                                                    } else {&amp;#10;                                                                                                        if (_pj.in_es6(&quot;colon&quot;, keys)) {&amp;#10;                                                                                                            text_13.text = (text_13.text + &quot;:&quot;);&amp;#10;                                                                                                        } else {&amp;#10;                                                                                                            if (_pj.in_es6(&quot;doublequote&quot;, keys)) {&amp;#10;                                                                                                                text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                                                                                            } else {&amp;#10;                                                                                                                if (_pj.in_es6(&quot;backslash&quot;, keys)) {&amp;#10;                                                                                                                    text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                                                                                                } else {&amp;#10;                                                                                                                    if (_pj.in_es6(&quot;slash&quot;, keys)) {&amp;#10;                                                                                                                        text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                                                                                                    } else {&amp;#10;                                                                                                                        if (_pj.in_es6(&quot;greater&quot;, keys)) {&amp;#10;                                                                                                                            text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                                                                                                        } else {&amp;#10;                                                                                                                            if (_pj.in_es6(&quot;less&quot;, keys)) {&amp;#10;                                                                                                                                text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                                                                                                            } else {&amp;#10;                                                                                                                                if (_pj.in_es6(&quot;quoteleft&quot;, keys)) {&amp;#10;                                                                                                                                    text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                                                                                                                } else {&amp;#10;                                                                                                                                    if (_pj.in_es6(&quot;asciitilde&quot;, keys)) {&amp;#10;                                                                                                                                        text_13.text = (text_13.text + &quot;&quot;);&amp;#10;                                                                                                                                    } else {&amp;#10;                                                                                                                                        if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                                                                                                                                            modify = true;&amp;#10;                                                                                                                                        } else {&amp;#10;                                                                                                                                            if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                                                                                                                                                continueRoutine = false;&amp;#10;                                                                                                                                            } else {&amp;#10;                                                                                                                                                if (modify) {&amp;#10;                                                                                                                                                    text_13.text = (text_13.text + keys[0].upper());&amp;#10;                                                                                                                                                    modify = false;&amp;#10;                                                                                                                                                } else {&amp;#10;                                                                                                                                                    text_13.text = (text_13.text + keys[0]);&amp;#10;                                                                                                                                                }&amp;#10;                                                                                                                                            }&amp;#10;                                                                                                                                        }&amp;#10;                                                                                                                                    }&amp;#10;                                                                                                                                }&amp;#10;                                                                                                                            }&amp;#10;                                                                                                                        }&amp;#10;                                                                                                                    }&amp;#10;                                                                                                                }&amp;#10;                                                                                                            }&amp;#10;                                                                                                        }&amp;#10;                                                                                                    }&amp;#10;                                                                                                }&amp;#10;                                                                                            }&amp;#10;                                                                                        }&amp;#10;                                                                                    }&amp;#10;                                                                                }&amp;#10;                                                                            }&amp;#10;                                                                        }&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;timeRemaining = countdownClock.getTime();&amp;#10;if ((timeRemaining &lt;= 0.0)) {&amp;#10;    continueRoutine = false;&amp;#10;    trials_2.finished = true;&amp;#10;    countdownStarted = false;&amp;#10;} else {&amp;#10;    minutes = Number.parseInt((timeRemaining / 60.0));&amp;#10;    seconds = Number.parseInt((timeRemaining - (minutes * 60.0)));&amp;#10;    timeText = ((minutes.toString() + &quot;:&quot;) + seconds.toString());&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="thisExp.addData(&quot;prepositions input&quot;, text_13.text)&amp;#10;&amp;#10;displayed_text = text_13.text&amp;#10;print(displayed_text)&amp;#10;&amp;#10;sentences = nltk.word_tokenize(displayed_text)&amp;#10;words = [nltk.word_tokenize(word) for word in sentences]&amp;#10;tagged_words = [nltk.pos_tag(sent) for sent in words] #tagged_words is a list of lists of tuples (ordered pairs basically)&amp;#10;print(tagged_words)&amp;#10;&amp;#10;#make an empty freqDist object&amp;#10;tags = nltk.FreqDist()&amp;#10;        &amp;#10;#for each list in tagged words, get the (word, tag) tuple, ex. (action, 'NN')&amp;#10;# 'NN' is the tag in this case&amp;#10;for pairs in tagged_words:&amp;#10;    for word,tag in pairs:&amp;#10;        #add 1 to the counts for each tag&amp;#10;        tags[tag] += 1&amp;#10;        &amp;#10;#how to get (and print) the frequency of 'NN's&amp;#10;print(tags.freq('IN'))&amp;#10;        &amp;#10;#how to print the FreqDist object&amp;#10;print(tags.most_common())&amp;#10;        &amp;#10;#sums up the desired frequencies, k is the 'NN' or 'VRB' or whatever&amp;#10;freq_sum = 0&amp;#10;for k in tags:&amp;#10;    #if it starts with capital n, its a noun, change this to 'V' if u want verbs&amp;#10;    if(k.startswith('IN')):&amp;#10;        freq_sum += tags.freq(k)&amp;#10;print(&quot;Frequency: &quot;, freq_sum)&amp;#10;print(&quot;Frequency (as %): &quot;, round((freq_sum*(100)),2))&amp;#10;    &amp;#10;if hcount &lt;= 3 and freq_sum &gt;= 0.1:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=6 and freq_sum &gt;= 0.15:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=9 and freq_sum &gt;= 0.2:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=12 and freq_sum &gt;= 0.25:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;=15 and freq_sum &gt;= 0.3:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;= 18 and freq_sum &gt;= 0.35:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;= 21 and freq_sum &gt;= 0.4:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;= 24 and freq_sum &gt;= 0.45:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;= 27 and freq_sum &gt;= 0.5:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;= 30 and freq_sum &gt;= 0.55:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;= 33 and freq_sum &gt;= 0.6:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;= 36 and freq_sum &gt;= 0.65:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;elif hcount &lt;= 39 and freq_sum &gt;= 0.7:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount+=1&amp;#10;else:&amp;#10;    nextRoutineNreps = 0&amp;#10;    &amp;#10;thisExp.addData('Hostage Count', hcount)&amp;#10;thisExp.addData('Frequency of prepositions', freq_sum)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_12" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="end_7">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="end_7" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="all keys" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <ImageComponent name="green_alien_4">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="aliens2.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="green_alien_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.6, 0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.25, 0.25)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <TextComponent name="showtimer_6">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="showtimer_6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.5, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="$timeText" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="actualhcount_5">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="actualhcount_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.6, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$hcount" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="displayhcount_7">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="displayhcount_7" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.4, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Hostage Count:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <PolygonComponent name="textborder_5">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-1,-1,-1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="textborder_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(0.9, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
    </Routine>
    <Routine name="alliteration_text">
      <TextComponent name="text_11">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_11" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_10">
        <Param name="Before Experiment" updates="constant" val="import nltk" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="import * as nltk from 'nltk';&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="hcount = 0&amp;#10;countdownStarted = False" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="hcount = 0;&amp;#10;countdownStarted = false;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;text_11.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;if ((! countdownStarted)) {&amp;#10;    countdownClock = new core.CountdownTimer(600);&amp;#10;    countdownStarted = true;&amp;#10;}&amp;#10;if ((trials.thisN === 0)) {&amp;#10;    hcount = 0;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;text_11.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;&amp;#10;if not countdownStarted:&amp;#10;    countdownClock = core.CountdownTimer(600) # 300 s = 5 minutes&amp;#10;    countdownStarted = True&amp;#10; &amp;#10;if trials.thisN == 0:&amp;#10;    hcount = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        text_11.text = text_11.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        text_11.text = text_11.text[:-1]&amp;#10;    elif 'period' in keys:&amp;#10;        text_11.text = text_11.text + '.'&amp;#10;    elif 'comma' in keys:&amp;#10;        text_11.text = text_11.text + ','&amp;#10;    elif 'apostrophe' in keys:&amp;#10;        text_11.text = text_11.text + '\''&amp;#10;    elif 'question' in keys:&amp;#10;        text_11.text = text_11.text + '?'&amp;#10;    elif 'exclamation' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'at' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'pound' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'dollar' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'percent' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'asciicircum' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'ampersand' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'asterisk' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'parenleft' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'parenright' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'underscore' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'minus' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'equal' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'plus' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'bracketleft' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'bracketright' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'braceleft' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'braceright' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'semicolon' in keys:&amp;#10;        text_11.text = text_11.text + ';'&amp;#10;    elif 'colon' in keys:&amp;#10;        text_11.text = text_11.text + ':'&amp;#10;    elif 'doublequote' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'backslash' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'slash' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'greater' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'less' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'quoteleft' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'asciitilde' in keys:&amp;#10;        text_11.text = text_11.text + ''&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            text_11.text = text_11.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            text_11.text = text_11.text + keys[0]&amp;#10;            &amp;#10;timeRemaining = countdownClock.getTime()&amp;#10;if timeRemaining &lt;= 0.0:&amp;#10;    continueRoutine = False # end this trial immediately&amp;#10;    trials.finished = True # and terminate the loop (use its actual name)&amp;#10;    countdownStarted = False # only necessary if you'll be using the countdown again elsewhere&amp;#10;else:&amp;#10;    minutes = int(timeRemaining/60.0) # the integer number of minutes&amp;#10;    seconds = int(timeRemaining - (minutes * 60.0))&amp;#10;    timeText = str(minutes) + ':' + str(seconds) # create a string of characters representing the time" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        text_11.text = (text_11.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            text_11.text = text_11.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;period&quot;, keys)) {&amp;#10;                text_11.text = (text_11.text + &quot;.&quot;);&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                    text_11.text = (text_11.text + &quot;,&quot;);&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;apostrophe&quot;, keys)) {&amp;#10;                        text_11.text = (text_11.text + &quot;'&quot;);&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;question&quot;, keys)) {&amp;#10;                            text_11.text = (text_11.text + &quot;?&quot;);&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;exclamation&quot;, keys)) {&amp;#10;                                text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;at&quot;, keys)) {&amp;#10;                                    text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;pound&quot;, keys)) {&amp;#10;                                        text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;dollar&quot;, keys)) {&amp;#10;                                            text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;percent&quot;, keys)) {&amp;#10;                                                text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;asciicircum&quot;, keys)) {&amp;#10;                                                    text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;ampersand&quot;, keys)) {&amp;#10;                                                        text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;asterisk&quot;, keys)) {&amp;#10;                                                            text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;parenleft&quot;, keys)) {&amp;#10;                                                                text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                                            } else {&amp;#10;                                                                if (_pj.in_es6(&quot;parenright&quot;, keys)) {&amp;#10;                                                                    text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                                                } else {&amp;#10;                                                                    if (_pj.in_es6(&quot;underscore&quot;, keys)) {&amp;#10;                                                                        text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                                                    } else {&amp;#10;                                                                        if (_pj.in_es6(&quot;minus&quot;, keys)) {&amp;#10;                                                                            text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                                                        } else {&amp;#10;                                                                            if (_pj.in_es6(&quot;equal&quot;, keys)) {&amp;#10;                                                                                text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                                                            } else {&amp;#10;                                                                                if (_pj.in_es6(&quot;plus&quot;, keys)) {&amp;#10;                                                                                    text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                                                                } else {&amp;#10;                                                                                    if (_pj.in_es6(&quot;bracketleft&quot;, keys)) {&amp;#10;                                                                                        text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                                                                    } else {&amp;#10;                                                                                        if (_pj.in_es6(&quot;bracketright&quot;, keys)) {&amp;#10;                                                                                            text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                                                                        } else {&amp;#10;                                                                                            if (_pj.in_es6(&quot;braceleft&quot;, keys)) {&amp;#10;                                                                                                text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                                                                            } else {&amp;#10;                                                                                                if (_pj.in_es6(&quot;braceright&quot;, keys)) {&amp;#10;                                                                                                    text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                                                                                } else {&amp;#10;                                                                                                    if (_pj.in_es6(&quot;semicolon&quot;, keys)) {&amp;#10;                                                                                                        text_11.text = (text_11.text + &quot;;&quot;);&amp;#10;                                                                                                    } else {&amp;#10;                                                                                                        if (_pj.in_es6(&quot;colon&quot;, keys)) {&amp;#10;                                                                                                            text_11.text = (text_11.text + &quot;:&quot;);&amp;#10;                                                                                                        } else {&amp;#10;                                                                                                            if (_pj.in_es6(&quot;doublequote&quot;, keys)) {&amp;#10;                                                                                                                text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                                                                                            } else {&amp;#10;                                                                                                                if (_pj.in_es6(&quot;backslash&quot;, keys)) {&amp;#10;                                                                                                                    text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                                                                                                } else {&amp;#10;                                                                                                                    if (_pj.in_es6(&quot;slash&quot;, keys)) {&amp;#10;                                                                                                                        text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                                                                                                    } else {&amp;#10;                                                                                                                        if (_pj.in_es6(&quot;greater&quot;, keys)) {&amp;#10;                                                                                                                            text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                                                                                                        } else {&amp;#10;                                                                                                                            if (_pj.in_es6(&quot;less&quot;, keys)) {&amp;#10;                                                                                                                                text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                                                                                                            } else {&amp;#10;                                                                                                                                if (_pj.in_es6(&quot;quoteleft&quot;, keys)) {&amp;#10;                                                                                                                                    text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                                                                                                                } else {&amp;#10;                                                                                                                                    if (_pj.in_es6(&quot;asciitilde&quot;, keys)) {&amp;#10;                                                                                                                                        text_11.text = (text_11.text + &quot;&quot;);&amp;#10;                                                                                                                                    } else {&amp;#10;                                                                                                                                        if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                                                                                                                                            modify = true;&amp;#10;                                                                                                                                        } else {&amp;#10;                                                                                                                                            if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                                                                                                                                                continueRoutine = false;&amp;#10;                                                                                                                                            } else {&amp;#10;                                                                                                                                                if (modify) {&amp;#10;                                                                                                                                                    text_11.text = (text_11.text + keys[0].upper());&amp;#10;                                                                                                                                                    modify = false;&amp;#10;                                                                                                                                                } else {&amp;#10;                                                                                                                                                    text_11.text = (text_11.text + keys[0]);&amp;#10;                                                                                                                                                }&amp;#10;                                                                                                                                            }&amp;#10;                                                                                                                                        }&amp;#10;                                                                                                                                    }&amp;#10;                                                                                                                                }&amp;#10;                                                                                                                            }&amp;#10;                                                                                                                        }&amp;#10;                                                                                                                    }&amp;#10;                                                                                                                }&amp;#10;                                                                                                            }&amp;#10;                                                                                                        }&amp;#10;                                                                                                    }&amp;#10;                                                                                                }&amp;#10;                                                                                            }&amp;#10;                                                                                        }&amp;#10;                                                                                    }&amp;#10;                                                                                }&amp;#10;                                                                            }&amp;#10;                                                                        }&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;timeRemaining = countdownClock.getTime();&amp;#10;if ((timeRemaining &lt;= 0.0)) {&amp;#10;    continueRoutine = false;&amp;#10;    trials.finished = true;&amp;#10;    countdownStarted = false;&amp;#10;} else {&amp;#10;    minutes = Number.parseInt((timeRemaining / 60.0));&amp;#10;    seconds = Number.parseInt((timeRemaining - (minutes * 60.0)));&amp;#10;    timeText = ((minutes.toString() + &quot;:&quot;) + seconds.toString());&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="import * as nltk from 'nltk';&amp;#10;import {word_tokenize} from 'nltk';&amp;#10;import {sent_tokenize} from 'nltk';&amp;#10;import {stopwords} from 'nltk/corpus';&amp;#10;import * as string from 'string';&amp;#10;import {OrderedDict, defaultdict} from 'collections';&amp;#10;import * as operator from 'operator';&amp;#10;var _pj;&amp;#10;var alliterating_sents, alliterating_words, alt_cnt, displayed_text, initial_sound, letters, max_key, my_ph, my_phonemes, nextRoutineNreps, previous_initial_sound, previous_word, sents, sorted_alliterating_sents, sounds, tokenized_sent;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;thisExp.addData(&quot;typedWord&quot;, text_11.text);&amp;#10;displayed_text = text_11.text;&amp;#10;console.log(displayed_text);&amp;#10;alt_cnt = 0;&amp;#10;letters = function () {&amp;#10;    var _pj_a = [], _pj_b = string.ascii_lowercase;&amp;#10;    for (var _pj_c = 0, _pj_d = _pj_b.length; (_pj_c &lt; _pj_d); _pj_c += 1) {&amp;#10;        var letter = _pj_b[_pj_c];&amp;#10;        _pj_a.push(letter);&amp;#10;    }&amp;#10;    return _pj_a;&amp;#10;}&amp;#10;.call(this);&amp;#10;sounds = ([&quot;ps&quot;, &quot;ph&quot;, &quot;cy&quot;, &quot;ce&quot;, &quot;ci&quot;, &quot;ca&quot;, &quot;co&quot;, &quot;cu&quot;, &quot;pt&quot;, &quot;pn,&quot;, &quot;kn&quot;, &quot;gn&quot;] + letters);&amp;#10;stopwords = (stopwords.words(&quot;english&quot;) + [&quot;'s&quot;]);&amp;#10;stopwords = set(stopwords);&amp;#10;sents = sent_tokenize(displayed_text);&amp;#10;my_phonemes = {&quot;ps&quot;: &quot;s&quot;, &quot;cy&quot;: &quot;s&quot;, &quot;ce&quot;: &quot;s&quot;, &quot;ci&quot;: &quot;s&quot;, &quot;ca&quot;: &quot;k&quot;, &quot;co&quot;: &quot;k&quot;, &quot;cu&quot;: &quot;k&quot;, &quot;ph&quot;: &quot;f&quot;, &quot;pf&quot;: &quot;f&quot;, &quot;pt&quot;: &quot;t&quot;, &quot;pn&quot;: &quot;n&quot;, &quot;kn&quot;: &quot;n&quot;, &quot;gn&quot;: &quot;n&quot;};&amp;#10;alliterating_sents = defaultdict(list);&amp;#10;for (var sent, _pj_c = 0, _pj_a = sents, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    sent = _pj_a[_pj_c];&amp;#10;    tokenized_sent = word_tokenize(sent);&amp;#10;    alliterating_words = [];&amp;#10;    previous_initial_sound = &quot;&quot;;&amp;#10;    for (var word, _pj_f = 0, _pj_d = tokenized_sent, _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;        word = _pj_d[_pj_f];&amp;#10;        for (var sound, _pj_i = 0, _pj_g = sounds, _pj_h = _pj_g.length; (_pj_i &lt; _pj_h); _pj_i += 1) {&amp;#10;            sound = _pj_g[_pj_i];&amp;#10;            if (word.lower().startswith(sound)) {&amp;#10;                initial_sound = sound;&amp;#10;                if (_pj.in_es6(initial_sound, my_phonemes)) {&amp;#10;                    initial_sound = my_phonemes[initial_sound];&amp;#10;                }&amp;#10;                my_ph = 0;&amp;#10;                console.log(initial_sound, &quot;-&quot;, previous_initial_sound);&amp;#10;                if (((initial_sound === previous_initial_sound) || (_pj.in_es6(initial_sound, my_phonemes) &amp;&amp; (my_phonemes[initial_sound] === previous_initial_sound)))) {&amp;#10;                    console.log(&quot;They are equal&quot;);&amp;#10;                    if ((_pj.in_es6(initial_sound, my_phonemes) &amp;&amp; (my_phonemes[initial_sound] === previous_initial_sound))) {&amp;#10;                        my_ph = 1;&amp;#10;                    }&amp;#10;                    if ((alliterating_words.length &gt; 0)) {&amp;#10;                        if ((previous_word === alliterating_words.slice((- 1))[0])) {&amp;#10;                            alliterating_words.append(word);&amp;#10;                        } else {&amp;#10;                            alliterating_words.append(previous_word);&amp;#10;                            alliterating_words.append(word);&amp;#10;                        }&amp;#10;                    } else {&amp;#10;                        alliterating_words.append(previous_word);&amp;#10;                        alliterating_words.append(word);&amp;#10;                    }&amp;#10;                }&amp;#10;                previous_initial_sound = initial_sound;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        if ((! _pj.in_es6(word, stopwords))) {&amp;#10;            if ((my_ph === 1)) {&amp;#10;                previous_initial_sound = my_phonemes[initial_sound];&amp;#10;                console.log(&quot;Test&quot;);&amp;#10;            } else {&amp;#10;                console.log(&quot;the else&quot;);&amp;#10;                if (_pj.in_es6(initial_sound, my_phonemes)) {&amp;#10;                    previous_initial_sound = my_phonemes[initial_sound];&amp;#10;                } else {&amp;#10;                    previous_initial_sound = initial_sound;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        previous_word = word;&amp;#10;    }&amp;#10;    alliterating_sents[alliterating_words.length].append(sent);&amp;#10;    if ((alliterating_words.length &gt; 0)) {&amp;#10;        alt_cnt += 1;&amp;#10;    }&amp;#10;}&amp;#10;if ((alt_cnt &gt;= 1)) {&amp;#10;    nextRoutineNreps = 1;&amp;#10;    hcount += 1;&amp;#10;} else {&amp;#10;    nextRoutineNreps = 0;&amp;#10;}&amp;#10;sorted_alliterating_sents = new OrderedDict(sorted(alliterating_sents.items(), {&quot;key&quot;: operator.itemgetter(0), &quot;reverse&quot;: true}));&amp;#10;console.log(&quot;A sorted ordered dict of sentences by number of alliterations:&quot;);&amp;#10;console.log(sorted_alliterating_sents);&amp;#10;console.log(&quot;Count&quot;, alt_cnt);&amp;#10;console.log((&quot;-&quot; * 15));&amp;#10;max_key = Math.max(function () {&amp;#10;    var _pj_a = [], _pj_b = sorted_alliterating_sents;&amp;#10;    for (var _pj_c = 0, _pj_d = _pj_b.length; (_pj_c &lt; _pj_d); _pj_c += 1) {&amp;#10;        var k = _pj_b[_pj_c];&amp;#10;        _pj_a.push(k);&amp;#10;    }&amp;#10;    return _pj_a;&amp;#10;}&amp;#10;.call(this));&amp;#10;console.log(&quot;Sentence(s) with most alliteration:&quot;, sorted_alliterating_sents[max_key]);&amp;#10;thisExp.addData(&quot;Hostage Count&quot;, hcount);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="import nltk&amp;#10;from nltk import word_tokenize&amp;#10;from nltk import sent_tokenize&amp;#10;from nltk.corpus import stopwords&amp;#10;import string&amp;#10;from collections import defaultdict, OrderedDict&amp;#10;import operator&amp;#10;&amp;#10;thisExp.addData(&quot;typedWord&quot;, text_11.text)&amp;#10;&amp;#10;displayed_text = text_11.text&amp;#10;print(displayed_text)&amp;#10;&amp;#10;#phoneme_dictionary = nltk.corpus.cmudict.dict()&amp;#10;alt_cnt=0&amp;#10;&amp;#10;# Get the English alphabet as a list of letters&amp;#10;letters = [letter for letter in string.ascii_lowercase] &amp;#10;&amp;#10;# Here we add some extra phonemes that are distinguishable in text.&amp;#10;# ('sailboat' and 'shark' don't alliterate, for instance)&amp;#10;# Digraphs go first as we need to try matching these before the individual letters,&amp;#10;# and break out if found.&amp;#10;sounds = [&quot;ps&quot;, &quot;ph&quot;, &quot;cy&quot;, &quot;ce&quot;, &quot;ci&quot;, &quot;ca&quot;, &quot;co&quot;, &quot;cu&quot;, &quot;pt&quot;, &quot;pn,&quot;, &quot;kn&quot;, &quot;gn&quot;] + letters &amp;#10;&amp;#10;# Use NLTK's built in stopwords and add &quot;'s&quot; to them&amp;#10;stopwords = stopwords.words('english') + [&quot;'s&quot;] # add extra stopwords here&amp;#10;stopwords = set(stopwords) # sets are MUCH faster to process&amp;#10;sents = sent_tokenize(displayed_text)&amp;#10;&amp;#10;my_phonemes = { 'ps' : 's', &amp;#10;&amp;#10;                'cy' : 's', &amp;#10;&amp;#10;                'ce' : 's', &amp;#10;&amp;#10;                'ci' : 's', &amp;#10;&amp;#10;                'ca' : 'k', &amp;#10;&amp;#10;                'co' : 'k', &amp;#10;&amp;#10;                'cu' : 'k', &amp;#10;&amp;#10;                'ph' : 'f', &amp;#10;&amp;#10;                'pf' : 'f',&amp;#10;&amp;#10;                'pt' : 't',&amp;#10;&amp;#10;                'pn' : 'n', &amp;#10;&amp;#10;                'kn' : 'n', &amp;#10;&amp;#10;                'gn' : 'n'} #maybe put ca:k in opposite way&amp;#10;&amp;#10;alliterating_sents = defaultdict(list)&amp;#10;for sent in sents:&amp;#10;&amp;#10;    tokenized_sent = word_tokenize(sent)&amp;#10;    &amp;#10;    # Create list of alliterating word sequences&amp;#10;&amp;#10;    alliterating_words = []&amp;#10;&amp;#10;    previous_initial_sound = &quot;&quot;&amp;#10;&amp;#10;    for word in tokenized_sent:&amp;#10;&amp;#10;        for sound in sounds:&amp;#10;&amp;#10;            if word.lower().startswith(sound): # only lowercasing when comparing retains original case&amp;#10;&amp;#10;                initial_sound = sound&amp;#10;&amp;#10;                if initial_sound in my_phonemes:&amp;#10;&amp;#10;                    initial_sound = my_phonemes[initial_sound]                &amp;#10;&amp;#10;                my_ph = 0&amp;#10;&amp;#10;                print(initial_sound,&quot;-&quot;,previous_initial_sound)&amp;#10;&amp;#10;                if initial_sound == previous_initial_sound or (initial_sound in my_phonemes and my_phonemes[initial_sound] == previous_initial_sound): #problem here, find a new initial statement so &quot;can kite&quot; is the same as &quot;kite can&quot;&amp;#10;&amp;#10;                    print(&quot;They are equal&quot;)&amp;#10;&amp;#10;                    if initial_sound in my_phonemes and my_phonemes[initial_sound] == previous_initial_sound:&amp;#10;&amp;#10;                        my_ph = 1&amp;#10;&amp;#10;                    if len(alliterating_words) &gt; 0:&amp;#10;&amp;#10;                        if previous_word == alliterating_words[-1]: # prevents duplication in chains of more than 2 alliterations, but assumes repetition is not alliteration)&amp;#10;&amp;#10;                            alliterating_words.append(word)&amp;#10;&amp;#10;                        else:&amp;#10;&amp;#10;                            alliterating_words.append(previous_word)&amp;#10;&amp;#10;                            alliterating_words.append(word)&amp;#10;&amp;#10;                    else:&amp;#10;&amp;#10;                        alliterating_words.append(previous_word)&amp;#10;&amp;#10;                        alliterating_words.append(word)        &amp;#10;&amp;#10;                previous_initial_sound = initial_sound&amp;#10;&amp;#10;                break # Allows us to treat sh/s distinctly&amp;#10;&amp;#10;&amp;#10;&amp;#10;        # This needs to be at the end of the loop&amp;#10;&amp;#10;        # It sets us up for the next iteration&amp;#10;&amp;#10;        if word not in stopwords: # ignores stopwords for the purpose of determining alliteration&amp;#10;&amp;#10;#            print(&quot;my_ph&quot;,&quot;-&quot;,my_ph)&amp;#10;&amp;#10;            if my_ph == 1:&amp;#10;&amp;#10;                previous_initial_sound = my_phonemes[initial_sound]&amp;#10;&amp;#10;                print(&quot;Test&quot;)&amp;#10;&amp;#10;            else:&amp;#10;&amp;#10;                print(&quot;the else&quot;)&amp;#10;&amp;#10;                if initial_sound in my_phonemes:&amp;#10;&amp;#10;                        previous_initial_sound = my_phonemes[initial_sound]&amp;#10;&amp;#10;                else:&amp;#10;&amp;#10;                    previous_initial_sound = initial_sound&amp;#10;&amp;#10;        previous_word = word&amp;#10;&amp;#10;&amp;#10;&amp;#10;    alliterating_sents[len(alliterating_words)].append(sent)&amp;#10;&amp;#10;    if len(alliterating_words) &gt; 0:&amp;#10;&amp;#10;        alt_cnt += 1&amp;#10;        &amp;#10;if alt_cnt &gt;=1:&amp;#10;    nextRoutineNreps = 1&amp;#10;    hcount += 1&amp;#10;else:&amp;#10;    nextRoutineNreps = 0&amp;#10;&amp;#10;sorted_alliterating_sents = OrderedDict(sorted(alliterating_sents.items(), key=operator.itemgetter(0), reverse=True))&amp;#10;&amp;#10;# OUTPUT&amp;#10;&amp;#10;print (&quot;A sorted ordered dict of sentences by number of alliterations:&quot;)&amp;#10;&amp;#10;print (sorted_alliterating_sents)&amp;#10;&amp;#10;print(&quot;Count&quot;,alt_cnt)&amp;#10;&amp;#10;print (&quot;-&quot; * 15)&amp;#10;&amp;#10;max_key = max([k for k in sorted_alliterating_sents]) # to get sent with max alliteration &amp;#10;&amp;#10;print (&quot;Sentence(s) with most alliteration:&quot;, sorted_alliterating_sents[max_key])&amp;#10;&amp;#10;thisExp.addData('Hostage Count', hcount)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_10" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="end_8">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="end_8" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="all keys" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <ImageComponent name="red_alien1">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="aliens1.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="red_alien1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.6, 0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.25, 0.25)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <TextComponent name="showtimer_7">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="showtimer_7" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.5, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="$timeText" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="actualhcount_6">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="actualhcount_6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.6, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$hcount" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="displayhcount_8">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="displayhcount_8" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.4, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Hostage Count:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <PolygonComponent name="textborder_6">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-1,-1,-1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="textborder_6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(0.9, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
    </Routine>
    <Routine name="participantID">
      <TextComponent name="explain">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="code"/>
        <Param name="name" updates="None" val="explain" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.15)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="In order to use your data, we need to identify you with a unique participant code. &amp;#10;&amp;#10;This code will consist of the following: the first three letters of the street you live on, followed by the last three letters of your mother’s name, followed by the first two letters of your birth month. &amp;#10;&amp;#10;For example, if the street name is ‘Road’, the mother’s name ‘Tracy’, and the birth month is ‘January’, the example code would be ROAACYJA&amp;#10;&amp;#10;Please enter your unique code below and then press enter:" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="participantcode">
        <Param name="color" updates="constant" val="red" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="participantcode" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.35)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_13">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;participantcode.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;participantcode.text = ''&amp;#10;event.clearEvents('keyboard')" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        participantcode.text = participantcode.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        participantcode.text = participantcode.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            participantcode.text = participantcode.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            participantcode.text = participantcode.text + keys[0]&amp;#10;            &amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        participantcode.text = (participantcode.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            participantcode.text = participantcode.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                modify = true;&amp;#10;            } else {&amp;#10;                if (modify) {&amp;#10;                    participantcode.text = (participantcode.text + keys[0].upper());&amp;#10;                    modify = false;&amp;#10;                } else {&amp;#10;                    participantcode.text = (participantcode.text + keys[0]);&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="thisExp.addData(&quot;participant code&quot;, participantcode.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="thisExp.addData(&quot;participant code&quot;, participantcode.text)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_13" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_3">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_14">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="thisExp=psychoJS.experiment;&amp;#10;win=psychoJS.window;&amp;#10;event=psychoJS.eventManager;&amp;#10;Array.prototype.append = [].push;&amp;#10;&amp;#10;Array.prototype.count = function(value) {&amp;#10;let count = 0;&amp;#10;this.forEach(item =&gt; {&amp;#10;if (item === value) {&amp;#10;count++;&amp;#10;}&amp;#10;});&amp;#10;return count;&amp;#10;}&amp;#10;&amp;#10;sum = function (arr) {&amp;#10;return arr.reduce((a,b)=&gt;a+b)&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_14" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="practice_VAT_instructions">
      <TextComponent name="text_14">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_14" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="While you are communicating with the officer, a sample fragmented message will be sent to you. You must decode that message, and continue communicating. To decode the message, choose which word best completes the phrase in the middle of the screen by pressing either the left or right arrow key. Please work as quickly as possible. &amp;#10;&amp;#10;Press return when you are ready to begin. " valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_4">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_4" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="practice_VAT">
      <TextComponent name="sentence_3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="sentence_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$sentences" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="choice1_3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="choice1_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.2, -0.2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$choice_a" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="choice2_3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="choice2_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.2, -0.2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$choice_b" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="endchoice_3">
        <Param name="allowedKeys" updates="constant" val="'left', 'right'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$corr_ans" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="endchoice_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="VATkeys">
        <Param name="color" updates="constant" val="red" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="VATkeys" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Press the left key to choose the left word and the right key to choose the right word" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="VAT1instruct">
      <TextComponent name="instructions_choice1">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="instructions_choice1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="ALERT: The United States Government has intercepted a message from the Qiczox commander. To decode the message, choose which word best completes the phrase in the middle of the screen by pressing either the left or right arrow key. Please work as quickly as possible. &amp;#10;&amp;#10;Press return when you are ready to begin" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="endchoice1instruct">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="endchoice1instruct" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="VAT2instruct">
      <TextComponent name="choice2instructtext">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="choice2instructtext" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="ALERT: The United States Government has received another message, but it is from the Kivix commander. To decode the message, choose which word best completes the phrase in the middle of the screen by pressing either the left or right arrow key. Please work as quickly as possible. &amp;#10;&amp;#10;Press return to continue" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="endchoice2instruct">
        <Param name="allowedKeys" updates="constant" val="'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="endchoice2instruct" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="VAT_2">
      <TextComponent name="sentence_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="sentence_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.3)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$sentences" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="choice1_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="choice1_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.2, -0.2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$choice_a" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="choice2_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="choice2_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.2, -0.2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$choice_b" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="image_2">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="aliens2.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="image_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.5, 0.35)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.3, 0.3)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="endchoice_2">
        <Param name="allowedKeys" updates="constant" val="'left', 'right'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$corr_ans" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="endchoice_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="VATrest2">
      <TextComponent name="text_4">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="text_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="debrief">
      <TextComponent name="endexperiment">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="endexperiment" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Thank you for your participation! &amp;#10;&amp;#10;Please fill out the qualtrics survey and review the debriefing form." valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="participantID"/>
    <LoopInitiator loopType="TrialHandler" name="instructloop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('instructionsloop', 'ADULT  RESEARCH  PARTICIPANT  INFORMED  CONSENT  FORM ')]), OrderedDict([('instructionsloop', 'Brief Description: The purpose of this research is to perform an experimental analysis of typed communication. Individuals who volunteer to participate in this study will play a fictional game on their computers in which they attempt to free hostages from fictional aliens by performing an ongoing typing task. We require that any participant be at least 18 years of age to participate.')]), OrderedDict([('instructionsloop', 'Please read the remainder of this form before deciding if you want to volunteer to be in this research study.')]), OrderedDict([('instructionsloop', 'Our names are Hannah J. Checkeye, Kathleen E. Daley, Angeline S. Gnanasekaren, Jenna M. Holland, and Kaitlyn R. Ownbey; we are undergraduate psychology researchers at the University of Mary Washington studying under Dr. W. David Stahlman. We are seeking your consent to participate in this research study. Involvement in the study is voluntary, so you may choose to participate or not. The information below explains the study in detail. ')]), OrderedDict([('instructionsloop', 'Details of Participant Involvement: We are interested in learning more about typed communication. If you agree to participate, you will be asked to complete demographic questions, a typing game, choice tasks, and a post-game survey.')]), OrderedDict([('instructionsloop', 'The typing game will consist of two nonconsecutive 10-minute strings of writing. Upon completion of each writing session of the game, you will be asked to perform a choice task. This study will take approximately thirty minutes to complete. If you do participate, a benefit of this study is that you will contribute towards the scientific community’s understanding of verbal behavior. ')]), OrderedDict([('instructionsloop', 'Privacy and Confidentiality: You can complete this survey at any time and in any location you feel comfortable. All information about participants will be kept anonymous. We are not collecting names, any identifying information, or IP addresses. A single copy of your data will be stored on Dr. Stahlman’s password protected computer. All other copies will be deleted.')]), OrderedDict([('instructionsloop', 'Risks and Benefits of Participation: The risks to participants in this study may include mild fatigue, discomfort from typing, and eye strain. The game’s narrative includes brief descriptions of alien abduction and a hostage scenario, so if either of these topics is personally upsetting to you please consider declining to participate. ')]), OrderedDict([('instructionsloop', 'These risks will be minimized by our experiment functioning like a game—the scenario depicted is highly improbable, even cartoonish, and the gameplay is mild. As a result, participants will hopefully find the tasks in the experiment enjoyable and engaging. To minimize typing discomfort, intermittent association tasks will be used to provide a short break from the typing tasks in the experiment. ')]), OrderedDict([('instructionsloop', 'Additionally, participants may leave the experiment at any time. Participation in this study will invoke indirect benefits, specifically for the scientific community at large. The participant results from this study will ensure a better understanding of verbal behavior.')]), OrderedDict([('instructionsloop', 'Participant Rights: If you do not want to be in this study, there will be no penalties or loss of benefits to which you are entitled. If you volunteer to be in this study and later change your mind, you have the right to withdraw your data.')]), OrderedDict([('instructionsloop', 'Choosing to leave the study before its completion will imply withdrawal. If you complete the study and decide that you wish to withdrawal, you may indicate this on debriefing form. In both scenarios, your data will be discarded. As data collection is anonymous, this will be your only opportunity to withdraw your data.')]), OrderedDict([('instructionsloop', 'As a voluntary participant in this research, you have the right to refuse to perform any activities and answer any questions that we ask of you. This research has been approved by the University of Mary Washington Institutional Review Board, a committee responsible for ensuring that the safety and rights of research participants are protected. ')]), OrderedDict([('instructionsloop', 'For information about your rights as a research participant, contact the IRB chair, Dr. Rosalyn Cooperman (rcooperm@umw.edu). For more information about this research before, during or after your participation, please contact Jenna M. Holland (jholland@mail.umw.edu). To report any unanticipated problems relating to the research that you experience during or following your participation, contact my university supervisor, Dr. W. David Stahlman (wdstahlm@umw.edu). We will provide this information again at debriefing.')]), OrderedDict([('instructionsloop', 'Consent: By advancing to the next page of the study, you are agreeing that you have read all of the information on this page, and all of your questions and concerns about the research described above have been addressed. You also certify that you choose, voluntarily, to participate in this research project. You also are certifying that you are at least 18 years of age.')]), OrderedDict([('instructionsloop', 'BEGIN EXPERIMENT')]), OrderedDict([('instructionsloop', 'ATTENTION: The first ever case of alien abduction has been verified in the United States. Two alien species, the Qiczox and Kivix, have come down from planet Nunus, and they have taken several humans around the country as hostages.\xa0 We are counting on you to release the hostages.\xa0')]), OrderedDict([('instructionsloop', 'NASA has appointed you as the United States Interstellar Messenger and Decoder. With this job title, you must communicate with the Qiczox and Kivix commanders in order to release the hostages. You will need to quickly and continuously type messages to the commanders. When you decide a message is complete, hit the return key to send it, and continue on with your next message. Remember: you cannot expect Qiczox and Kivix to think like you do.\xa0\xa0')]), OrderedDict([('instructionsloop', 'You should use a computer or tablet with a keyboard to complete this task. When you are ready to begin your mission, press the return key. Good luck.\xa0')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="instructions.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="instructloop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="instructions"/>
    <LoopTerminator name="instructloop"/>
    <LoopInitiator loopType="TrialHandler" name="practice_instructloop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('practice_instructions', 'PRACTICE ROUND')]), OrderedDict([('practice_instructions', 'To make sure you are able to maintain continuous communication with the alien commanders, we have arranged a practice communication task with one of our communication officers. This officer will mimic the communication of the alien species. You will need to communicate continuously with the officer by typing on your keyboard. They should only include letter and punctuation keys, with no special characters, number keys, or function keys. Remember that our officer will be communicating like the aliens, who do not think in the same way you do. ')]), OrderedDict([('practice_instructions', 'Once you decide that your message is complete, hit the return key to begin a new message. While you are communicating with the officer, a sample fragmented message will be sent to you. You must decode that message, and continue communicating. To decode the message, choose which word best completes the phrase in the middle of the screen. The message will only be visible for a few seconds, so work quickly. Remember that our officer will be communicating like the aliens, who do not think in the same way you do. When you are ready to begin alien communication, press the return key')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="instructions_practiceround.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="practice_instructloop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="instructions_practice"/>
    <LoopTerminator name="practice_instructloop"/>
    <LoopInitiator loopType="TrialHandler" name="practice_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="4" valType="code"/>
      <Param name="name" updates="None" val="practice_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="practice_round"/>
    <LoopInitiator loopType="TrialHandler" name="present_reinforcement1">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="nextRoutineNreps" valType="code"/>
      <Param name="name" updates="None" val="present_reinforcement1" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="reinforcement"/>
    <LoopTerminator name="present_reinforcement1"/>
    <LoopTerminator name="practice_trials"/>
    <Routine name="practice_VAT_instructions"/>
    <LoopInitiator loopType="TrialHandler" name="practice_VAT_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('sentences', 'Birds run ____ fault'), ('choice_a', 'green'), ('choice_b', 'disgusting')]), OrderedDict([('sentences', 'Stars blow meet ____'), ('choice_a', 'castle'), ('choice_b', 'field')]), OrderedDict([('sentences', 'Catch ____ tree back'), ('choice_a', 'screen'), ('choice_b', 'drink')]), OrderedDict([('sentences', '_____ school come pole'), ('choice_a', 'kick'), ('choice_b', 'water')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="practicevat.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="practice_VAT_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="VATrest"/>
    <Routine name="practice_VAT"/>
    <LoopTerminator name="practice_VAT_trials"/>
    <LoopInitiator loopType="TrialHandler" name="r1_instruct">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('instruct_1', 'Now that you have completed the practice task, you are ready to begin official communication with the Qiczox and Kivix commanders as the United States Interstellar Messenger and Decoder. You will need to communicate with the commanders by typing on your keyboard. Your messages need to be rapid, complete, and engaging. ')]), OrderedDict([('instruct_1', 'They should only include letter and punctuation keys, with no special characters, number keys, or function keys. Once you decide that your message is complete, hit the return key to send it and then begin a new message. Remember that these are alien species, so they do not think in the same way you do. When you are ready to begin alien communication, press the return key.\xa0')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="round1_instructions.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="r1_instruct" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="instructions_round1"/>
    <LoopTerminator name="r1_instruct"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1000" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="alliteration_text"/>
    <LoopInitiator loopType="TrialHandler" name="present_reinforcement">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="nextRoutineNreps" valType="code"/>
      <Param name="name" updates="None" val="present_reinforcement" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="reinforcement"/>
    <LoopTerminator name="present_reinforcement"/>
    <LoopTerminator name="trials"/>
    <Routine name="VAT1instruct"/>
    <LoopInitiator loopType="TrialHandler" name="VAT1trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('sentences', 'A static\xa0_____ summer cactus.\xa0'), ('choice_a', 'Stitching'), ('choice_b', 'Format'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'River _____ rapture carol igloo.\xa0\xa0'), ('choice_a', 'Inject'), ('choice_b', 'Recover'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Estimated _____ egg internet pop.\xa0\xa0'), ('choice_a', 'Court'), ('choice_b', 'End'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'After wonder _____ win fabulous.\xa0\xa0'), ('choice_a', 'Water'), ('choice_b', 'Agent'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'Octopus _____ dog ramp hunter.\xa0\xa0'), ('choice_a', 'Swipe'), ('choice_b', 'Organic'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Daffodil donkey _____ enter turkey.\xa0\xa0'), ('choice_a', 'Denver'), ('choice_b', 'Tile'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'Zap _____ thumb bent viral.\xa0\xa0'), ('choice_a', 'Zebra'), ('choice_b', 'Literacy'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'Dark _____ dirty corps nails.\xa0\xa0'), ('choice_a', 'Draining'), ('choice_b', 'Elite'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'Smooth scene _____ talented clean.\xa0'), ('choice_a', 'Swiss'), ('choice_b', 'Tax'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'Gray _____ geese kick jump.\xa0'), ('choice_a', 'Critical'), ('choice_b', 'Gum'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Historical _____ grasp pink zoom.\xa0'), ('choice_a', 'School'), ('choice_b', 'Garnish'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Poor particle _____ bracket psychology.\xa0'), ('choice_a', 'Pickle'), ('choice_b', 'Milk'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'Science _____ smoothie museum kingdom.\xa0'), ('choice_a', 'Cat'), ('choice_b', 'Steak'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Dramatic _____ dancer father\xa0omission.\xa0\xa0'), ('choice_a', 'Dart'), ('choice_b', 'Shot'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'Ample _____ monopoly sentence mist.\xa0\xa0'), ('choice_a', 'Arrogantly'), ('choice_b', 'Sketch'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'Dragon _____ eyebrow wicket tennis.\xa0\xa0'), ('choice_a', 'Dread'), ('choice_b', 'Member'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'Cheap sympathetic _____ infinite investigator.\xa0\xa0'), ('choice_a', 'Fraud'), ('choice_b', 'Intercept'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Remain massive _____ ill injection.\xa0'), ('choice_a', 'Remark'), ('choice_b', 'Idiot'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Soldier _____ prosperity diameter chorus.\xa0\xa0'), ('choice_a', 'Animal'), ('choice_b', 'Stamp'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Module noodle _____ nice sassy.\xa0'), ('choice_a', 'Nest'), ('choice_b', 'Plain'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'Woodland _____ wick crumb teeth.\xa0'), ('choice_a', 'Ritual'), ('choice_b', 'Waiter'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Instance pizza _____ timing clash.\xa0'), ('choice_a', 'Asset'), ('choice_b', 'Turtle'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Marathon church _____ chairman secret.\xa0'), ('choice_a', 'Forestry'), ('choice_b', 'Cartoon'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Fascinating escape _____ express phone.\xa0'), ('choice_a', 'Eager'), ('choice_b', 'Crowder'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'Rake _____ ready know yikes.\xa0\xa0'), ('choice_a', 'Rocking'), ('choice_b', 'Shape'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'Burnt _____ humble shipping paper.\xa0\xa0'), ('choice_a', 'Earthwax'), ('choice_b', 'Baker'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Mask dock _____ imply quest.\xa0\xa0'), ('choice_a', 'Drown'), ('choice_b', 'Stun'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'Domestic clinical _____ digital concrete.\xa0\xa0'), ('choice_a', 'Square'), ('choice_b', 'Drop'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Weekly holly _____ meal film.\xa0'), ('choice_a', 'Hang'), ('choice_b', 'Inquiry'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'Half cereal _____\xa0concentration\xa0orange.\xa0\xa0'), ('choice_a', 'Temptation'), ('choice_b', 'Cup'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Knob _____ interesting pickle violin.\xa0\xa0'), ('choice_a', 'Evolution'), ('choice_b', 'Knowing'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Generous grape _____ nurse salmon.\xa0\xa0'), ('choice_a', 'Indication'), ('choice_b', 'Gravity'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Desert _____ ozone hole native.\xa0\xa0'), ('choice_a', 'Dessert'), ('choice_b', 'Release'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'Lifetime severe _____ impossible scrap.\xa0'), ('choice_a', 'Grimace'), ('choice_b', 'Iris '), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Late wild _____ evolution open.\xa0\xa0'), ('choice_a', 'Haunt'), ('choice_b', 'Wolf'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'No new _____ old tragic.\xa0\xa0'), ('choice_a', 'Mount'), ('choice_b', 'Nap'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Mass _____ civil bizarre ice.\xa0\xa0'), ('choice_a', 'Country'), ('choice_b', 'Market'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Outdoor foreign _____ finger climber.\xa0\xa0'), ('choice_a', 'Frost'), ('choice_b', 'Waterfall'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'Strain _____ shadow calendar pen.\xa0\xa0'), ('choice_a', 'Sour'), ('choice_b', 'Enter'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'Band _____\xa0continuous\xa0net individual.\xa0\xa0'), ('choice_a', 'Helix'), ('choice_b', 'Crunch'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Person _____ place thing state.\xa0\xa0'), ('choice_a', 'Incredibly'), ('choice_b', 'Pumpkin'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Statue _____ rock president stair.\xa0\xa0'), ('choice_a', 'Raining'), ('choice_b', 'Popcorn'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'Face happy _____ unhappy remaining.\xa0\xa0'), ('choice_a', 'Kindly'), ('choice_b', 'Hungry'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Green fair _____ jealous reservation.\xa0\xa0'), ('choice_a', 'Tundra'), ('choice_b', 'Jar'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'The walking _____ witch organizational.\xa0\xa0'), ('choice_a', 'Sushi'), ('choice_b', 'Wimper'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Northern _____ nursing pie lake.\xa0\xa0'), ('choice_a', 'Necklace'), ('choice_b', 'Turnip'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'Static number _____ fashion formidable.\xa0\xa0'), ('choice_a', 'Flossy'), ('choice_b', 'Love'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'East hobby _____\xa0embarrassed\xa0now.\xa0\xa0'), ('choice_a', 'Underneath'), ('choice_b', 'Hilly'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Secular house _____ gorilla gasp.\xa0\xa0'), ('choice_a', 'Grungy'), ('choice_b', 'Level'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'Band _____ bang joint sudden.\xa0'), ('choice_a', 'Burning'), ('choice_b', 'Chore'), ('corr_ans', 'left')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="VAT_Alliteration.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="VAT1trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="VATrest"/>
    <Routine name="VAT1"/>
    <LoopTerminator name="VAT1trials"/>
    <Routine name="break_1"/>
    <Routine name="introducecont2"/>
    <LoopInitiator loopType="TrialHandler" name="trials_2">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1000" valType="code"/>
      <Param name="name" updates="None" val="trials_2" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="prepositions_text"/>
    <LoopInitiator loopType="TrialHandler" name="present_reinforcement2">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="nextRoutineNreps" valType="code"/>
      <Param name="name" updates="None" val="present_reinforcement2" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="reinforcement"/>
    <LoopTerminator name="present_reinforcement2"/>
    <LoopTerminator name="trials_2"/>
    <Routine name="VAT2instruct"/>
    <LoopInitiator loopType="TrialHandler" name="VAT2trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('sentences', 'That way visits _____ in the winter\xa0\xa0'), ('choice_a', 'Beside'), ('choice_b', 'Strongly'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'The step _____ the ceaseless ray.\xa0\xa0'), ('choice_a', 'Among '), ('choice_b', 'Joyfully'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'The blushing _____collaborates the land.\xa0\xa0'), ('choice_a', 'Curiously'), ('choice_b', 'Against '), ('corr_ans', 'right')]), OrderedDict([('sentences', 'Driving recommends the _____ structure.\xa0\xa0'), ('choice_a', 'Above '), ('choice_b', 'Lively'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'Metal schedules _____ joyous authority.\xa0'), ('choice_a', 'Safely'), ('choice_b', 'On'), ('corr_ans', 'right')]), OrderedDict([('sentences', 'The fiction _____ the premium copper.\xa0\xa0'), ('choice_a', 'Into'), ('choice_b', 'Promptly'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'Boggy tends _____ uptight morning.\xa0'), ('choice_a', 'Beneath '), ('choice_b', 'Offensively'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'Dime sulky _____ validates unbecoming.\xa0'), ('choice_a', 'Towards '), ('choice_b', 'Gladly'), ('corr_ans', 'left')]), OrderedDict([('sentences', 'The punishment _____ more butter.\xa0'), ('choice_a', 'Greedily'), ('choice_b', 'Below'), ('corr_ans', 'right')]), OrderedDict([('sentences', '\xa0Voice maintains _____ common crush.\xa0'), ('choice_a', 'Along'), ('choice_b', 'Slightly'), ('corr_ans', 'left')]), OrderedDict([('sentences', '\xa0Laughing logs _____ selfish salt.\xa0'), ('choice_a', 'Onto '), ('choice_b', 'Delightfully'), ('corr_ans', 'left')]), OrderedDict([('sentences', '\xa0The joint _____ pink minutes.\xa0'), ('choice_a', 'Versus '), ('choice_b', 'Openly'), ('corr_ans', 'left')]), OrderedDict([('sentences', '\xa0Burns summarizes _____ direction.\xa0'), ('choice_a', 'Healthy'), ('choice_b', 'Excluding '), ('corr_ans', 'right')]), OrderedDict([('sentences', '\xa0Instrument\xa0render _____ noxious wash.\xa0'), ('choice_a', 'Loosely'), ('choice_b', 'Via '), ('corr_ans', 'right')]), OrderedDict([('sentences', '\xa0The hypnotic _____ spokes the idea.\xa0'), ('choice_a', 'Down'), ('choice_b', 'Hopefully'), ('corr_ans', 'left')]), OrderedDict([('sentences', '\xa0Approval categorizes _____ far amusement.\xa0'), ('choice_a', 'Per '), ('choice_b', 'Fairly'), ('corr_ans', 'left')]), OrderedDict([('sentences', '\xa0Waggish motion _____ looking shade.\xa0'), ('choice_a', 'Honestly'), ('choice_b', 'Behind '), ('corr_ans', 'right')]), OrderedDict([('sentences', '\xa0Slope aides _____ impossible muddled.\xa0'), ('choice_a', 'Jaggedly'), ('choice_b', 'Over '), ('corr_ans', 'right')]), OrderedDict([('sentences', '\xa0The invincible _____ combines surprising.\xa0'), ('choice_a', 'Unnaturally'), ('choice_b', 'Upon '), ('corr_ans', 'right')]), OrderedDict([('sentences', '\xa0Folding paint solves _____ zany spicy.\xa0'), ('choice_a', 'With'), ('choice_b', 'Kindheartedly'), ('corr_ans', 'left')]), OrderedDict([('sentences', '\xa0The chivalrous wound _____ long shock.\xa0'), ('choice_a', 'Wildly'), ('choice_b', 'From'), ('corr_ans', 'right')]), OrderedDict([('sentences', '\xa0Coal preserves _____ scandalous comfort.\xa0\xa0'), ('choice_a', 'Noisily'), ('choice_b', 'Within '), ('corr_ans', 'right')]), OrderedDict([('sentences', '\xa0The hungry night _____ manners value.\xa0'), ('choice_a', 'Off '), ('choice_b', 'Busily'), ('corr_ans', 'left')]), OrderedDict([('sentences', '\xa0Dreary house _____ collects desire.\xa0'), ('choice_a', 'Defiantly'), ('choice_b', 'Regarding '), ('corr_ans', 'right')]), OrderedDict([('sentences', '\xa0The learning _____ the ablaze peace.\xa0'), ('choice_a', 'Amid '), ('choice_b', 'Terrifically'), ('corr_ans', 'left')]), OrderedDict([('sentences', '\xa0Frightened pleasure _____ meal copies.\xa0'), ('choice_a', 'Inside '), ('choice_b', 'Jovially'), ('corr_ans', 'left')]), OrderedDict([('sentences', '\xa0The cause records _____ sturdy run.\xa0'), ('choice_a', 'Up'), ('choice_b', 'Ferverently'), ('corr_ans', 'left')]), OrderedDict([('sentences', '\xa0Discovery _____ under tiny sky.\xa0'), ('choice_a', 'Crazily'), ('choice_b', 'Before'), ('corr_ans', 'right')]), OrderedDict([('sentences', '\xa0The smile zaps _____ fortunate destruction.\xa0'), ('choice_a', 'Equally'), ('choice_b', 'For'), ('corr_ans', 'right')]), OrderedDict([('sentences', '\xa0Science edits _____ ornament.\xa0'), ('choice_a', 'Similarly'), ('choice_b', 'Following'), ('corr_ans', 'right')]), OrderedDict([('sentences', '\xa0The icy decision _____ tastes.\xa0'), ('choice_a', 'Outside'), ('choice_b', 'Punctually'), ('corr_ans', 'left')]), OrderedDict([('sentences', '\xa0The wasteful jumping _____ wry folds.\xa0'), ('choice_a', 'Near'), ('choice_b', 'Scarily'), ('corr_ans', 'left')]), OrderedDict([('sentences', '\xa0Swim instructs _____ complex slip.\xa0'), ('choice_a', 'Suspiciously'), ('choice_b', 'Next to'), ('corr_ans', 'right')]), OrderedDict([('sentences', '\xa0Moral debt qualifies _____ jittery increasing.\xa0'), ('choice_a', 'Voluntarily'), ('choice_b', 'Round'), ('corr_ans', 'right')]), OrderedDict([('sentences', '\xa0Behavior innovates _____ exuberant impressive.\xa0'), ('choice_a', 'Since'), ('choice_b', 'Merrily'), ('corr_ans', 'left')]), OrderedDict([('sentences', '\xa0A real operant _____ sick\xa0rejoice.\xa0\xa0'), ('choice_a', 'Colorfully'), ('choice_b', 'Through'), ('corr_ans', 'right')]), OrderedDict([('sentences', '\xa0Screeching prose _____ weight.\xa0'), ('choice_a', 'Until '), ('choice_b', 'Yearningly'), ('corr_ans', 'left')]), OrderedDict([('sentences', '\xa0Volatile crime _____ locking elated.\xa0'), ('choice_a', 'Out'), ('choice_b', 'Shyly'), ('corr_ans', 'left')]), OrderedDict([('sentences', '\xa0Uninterested _____ pilots lovely sky.\xa0\xa0'), ('choice_a', 'Without'), ('choice_b', 'Sternly'), ('corr_ans', 'left')]), OrderedDict([('sentences', '\xa0Machinery\xa0critique _____ behavior lever.\xa0'), ('choice_a', 'Briefly'), ('choice_b', 'Opposite '), ('corr_ans', 'right')]), OrderedDict([('sentences', '\xa0Bursting explores _____ fast incompetent.\xa0'), ('choice_a', 'Till'), ('choice_b', 'Warmly'), ('corr_ans', 'left')]), OrderedDict([('sentences', '\xa0Joy memories _____ extended weather.\xa0'), ('choice_a', 'Owing to'), ('choice_b', 'Nervously'), ('corr_ans', 'left')]), OrderedDict([('sentences', '\xa0Giddy _____ justifies three mist.\xa0'), ('choice_a', 'Coaxingly'), ('choice_b', 'Prior to'), ('corr_ans', 'right')]), OrderedDict([('sentences', '\xa0Building maximizes _____ witty page.\xa0'), ('choice_a', 'Closely'), ('choice_b', 'Apart from'), ('corr_ans', 'right')]), OrderedDict([('sentences', '\xa0Grain minimizes _____ empty opinion.\xa0'), ('choice_a', 'Woefully'), ('choice_b', 'Ahead of'), ('corr_ans', 'right')]), OrderedDict([('sentences', '\xa0Care inspires _____ zonked level.\xa0'), ('choice_a', 'Across'), ('choice_b', 'Silently'), ('corr_ans', 'left')]), OrderedDict([('sentences', '\xa0Nonchalant work _____ dangerous amazing.\xa0\xa0'), ('choice_a', 'Eagerly'), ('choice_b', 'About'), ('corr_ans', 'right')]), OrderedDict([('sentences', '\xa0Rhythm _____ neat weary.\xa0'), ('choice_a', 'Mockingly'), ('choice_b', 'According to'), ('corr_ans', 'right')]), OrderedDict([('sentences', '\xa0Absurd reactions _____ lawful paint.\xa0'), ('choice_a', 'Miserably'), ('choice_b', 'Barring'), ('corr_ans', 'right')]), OrderedDict([('sentences', '\xa0The bite transports _____ vigorous meeting.\xa0'), ('choice_a', 'Atop'), ('choice_b', 'Rapidly'), ('corr_ans', 'left')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="VAT_Prepositions.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="VAT2trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="VATrest2"/>
    <Routine name="VAT_2"/>
    <LoopTerminator name="VAT2trials"/>
    <Routine name="debrief"/>
  </Flow>
</PsychoPy2experiment>
